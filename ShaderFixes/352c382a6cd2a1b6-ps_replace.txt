// ---- Created with 3Dmigoto v1.3.16 on Sat Jul 20 10:00:39 2024
Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb1 : register(b1)
{
  float4 cb1[8];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[122];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main(
  float4 v0 : SV_POSITION0,
  float4 v1 : COLOR0,
  float4 v2 : TEXCOORD0,
  float4 v3 : TEXCOORD1,
  float4 v4 : TEXCOORD3,
  float4 v5 : TEXCOORD4,
  float4 v6 : TEXCOORD5,
  float4 v7 : TEXCOORD6,
  float4 v8 : TEXCOORD7,
  float4 v9 : TEXCOORD8,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1,
  out float4 o2 : SV_Target2,
  out float o3 : SV_Target3,
  out float o4 : SV_Target4,
  out float o5 : SV_Target5)
{
  const float4 icb[] = { { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 0, 0, 1.000000, 0},
                              { 0, 0, 0, 1.000000} };
  float4 r0,r1,r2,r3,r4,r5,r6;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.x = cmp(0 != cb0[96].y);
  r0.xy = v6.xy * cb0[95].xy + cb0[95].zw;
  r1.xyzw = t0.Sample(s0_s, r0.xy).xyzw;
  r0.z = cmp(cb0[94].x == 1.000000);
  r0.w = -cb0[94].y + r1.w;
  r0.w = cmp(r0.w < 0);
  r0.z = r0.z ? r0.w : 0;
  if (r0.z != 0) discard;
  r0.z = cmp(0 != cb0[113].x);
  r0.w = cmp(0 != cb0[115].x);
  r1.w = (int)r0.w | (int)r0.z;
  r2.x = cmp(0 != cb0[117].x);
  r1.w = (int)r1.w | (int)r2.x;
  r2.y = cmp(0 != cb0[119].x);
  r1.w = (int)r1.w | (int)r2.y;
  if (r1.w != 0) {
    r0.x = t1.Sample(s1_s, r0.xy).w;
    r3.xyzw = cmp(r0.xxxx >= float4(0.800000012,0.400000006,0.200000003,0.600000024));
    r0.y = r0.z ? r3.x : 0;
    r4.xyz = cb0[114].xyz * cb0[113].yzw;
    r0.z = r0.w ? r3.y : 0;
    r5.xyz = cmp(r0.xxx < float3(0.600000024,0.400000006,0.800000012));
    r0.x = r0.z ? r5.x : 0;
    r6.xyz = cb0[116].xyz * cb0[115].yzw;
    r0.zw = r2.xy ? r3.zw : 0;
    r2.xzw = cb0[118].xyz * cb0[117].yzw;
    r0.zw = r5.yz ? r0.zw : 0;
    r3.xyz = cb0[120].xyz * cb0[119].yzw;
    r5.xyz = cb0[83].xyz * cb0[81].xyz;
    r1.w = cb0[121].x;
    r3.xyz = r0.www ? r3.xyz : r5.xyz;
    r0.w = r0.w ? cb0[120].w : r1.w;
    r2.xyz = r0.zzz ? r2.xzw : r3.xyz;
    r0.z = r0.z ? cb0[118].w : r0.w;
    r2.xyz = r0.xxx ? r6.xyz : r2.xyz;
    r0.x = r0.x ? cb0[116].w : r0.z;
    r2.xyz = r0.yyy ? r4.xyz : r2.xyz;
    r0.x = r0.y ? cb0[114].w : r0.x;
  } else {
    r2.xyz = v1.xyz;
    r0.x = cb0[121].x;
  }
  r0.yzw = r1.xyz * float3(0.200000003,0.200000003,0.200000003) + -r2.xyz;
  r0.xyz = r0.xxx * r0.yzw + r2.xyz;
  r0.w = cmp(0 != cb0[79].w);
  r1.x = 0.00392156886 * cb0[80].x;
  o2.z = r0.w ? r1.x : r0.z;
  o0.xyz = v2.xyz * float3(0.5,0.5,0.5) + float3(0.5,0.5,0.5);
  o0.w = 0;
  o1.xyz = r0.xyz;
  o1.w = 0.223606795;
  o2.xy = r0.xy;
  o2.w = cb0[110].z;
  o3.x = 0.0196078438;
  o4.x = cb0[110].z;
  o5.x = 0;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Jul 20 10:00:39 2024
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// COLOR                    0   xyzw        1     NONE   float   xyz
// TEXCOORD                 0   xyz         2     NONE   float   xyz
// TEXCOORD                 1   xyzw        3     NONE   float   xy w
// TEXCOORD                 3   xyzw        4     NONE   float
// TEXCOORD                 4   xyzw        5     NONE   float
// TEXCOORD                 5   xyzw        6     NONE   float   xy
// TEXCOORD                 6   xyzw        7     NONE   float
// TEXCOORD                 7   xyzw        8     NONE   float
// TEXCOORD                 8   xyzw        9     NONE   float
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
// SV_Target                2   xyzw        2   TARGET   float   xyzw
// SV_Target                3   x           3   TARGET   float   x
// SV_Target                4   x           4   TARGET   float   x
// SV_Target                5   x           5   TARGET   float   x
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 0, 0, 1.000000, 0},
                              { 0, 0, 0, 1.000000} }
dcl_constantbuffer CB0[122], immediateIndexed
dcl_constantbuffer CB1[8], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_input_ps linear v1.xyz
dcl_input_ps linear v2.xyz
dcl_input_ps linear v3.xyw
dcl_input_ps linear v6.xy
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.x
dcl_output o4.x
dcl_output o5.x
dcl_temps 7
ne r0.x, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[96].y
if_nz r0.x
  lt r0.x, cb0[96].z, l(0.950000)
  if_nz r0.x
    div r0.xy, v3.yxyy, v3.wwww
    mul r0.xy, r0.xyxx, cb1[7].yxyy
    mul r0.xy, r0.xyxx, l(0.250000, 0.250000, 0.000000, 0.000000)
    ge r0.zw, r0.xxxy, -r0.xxxy
    frc r0.xy, |r0.xyxx|
    movc r0.xy, r0.zwzz, r0.xyxx, -r0.xyxx
    mul r0.xy, r0.xyxx, l(4.000000, 4.000000, 0.000000, 0.000000)
    ftou r0.xy, r0.xyxx
    dp4 r1.x, cb0[17].xyzw, icb[r0.y + 0].xyzw
    dp4 r1.y, cb0[18].xyzw, icb[r0.y + 0].xyzw
    dp4 r1.z, cb0[19].xyzw, icb[r0.y + 0].xyzw
    dp4 r1.w, cb0[20].xyzw, icb[r0.y + 0].xyzw
    dp4 r0.x, r1.xyzw, icb[r0.x + 0].xyzw
    mad r0.x, cb0[96].z, l(17.000000), -r0.x
    add r0.x, r0.x, l(-0.010000)
    lt r0.x, r0.x, l(0.000000)
    discard_nz r0.x
  endif
endif
mad r0.xy, v6.xyxx, cb0[95].xyxx, cb0[95].zwzz
sample_indexable(texture2d)(float,float,float,float) r1.xyzw, r0.xyxx, t0.xyzw, s0
eq r0.z, cb0[94].x, l(1.000000)
add r0.w, r1.w, -cb0[94].y
lt r0.w, r0.w, l(0.000000)
and r0.z, r0.z, r0.w
discard_nz r0.z
ne r0.z, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[113].x
ne r0.w, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[115].x
or r1.w, r0.w, r0.z
ne r2.x, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[117].x
or r1.w, r1.w, r2.x
ne r2.y, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[119].x
or r1.w, r1.w, r2.y
if_nz r1.w
  sample_indexable(texture2d)(float,float,float,float) r0.x, r0.xyxx, t1.wxyz, s1
  ge r3.xyzw, r0.xxxx, l(0.800000, 0.400000, 0.200000, 0.600000)
  and r0.y, r0.z, r3.x
  mul r4.xyz, cb0[113].yzwy, cb0[114].xyzx
  and r0.z, r0.w, r3.y
  lt r5.xyz, r0.xxxx, l(0.600000, 0.400000, 0.800000, 0.000000)
  and r0.x, r0.z, r5.x
  mul r6.xyz, cb0[115].yzwy, cb0[116].xyzx
  and r0.zw, r2.xxxy, r3.zzzw
  mul r2.xzw, cb0[117].yyzw, cb0[118].xxyz
  and r0.zw, r5.yyyz, r0.zzzw
  mul r3.xyz, cb0[119].yzwy, cb0[120].xyzx
  mul r5.xyz, cb0[81].xyzx, cb0[83].xyzx
  mov r1.w, cb0[121].x
  movc r3.xyz, r0.wwww, r3.xyzx, r5.xyzx
  movc r0.w, r0.w, cb0[120].w, r1.w
  movc r2.xyz, r0.zzzz, r2.xzwx, r3.xyzx
  movc r0.z, r0.z, cb0[118].w, r0.w
  movc r2.xyz, r0.xxxx, r6.xyzx, r2.xyzx
  movc r0.x, r0.x, cb0[116].w, r0.z
  movc r2.xyz, r0.yyyy, r4.xyzx, r2.xyzx
  movc r0.x, r0.y, cb0[114].w, r0.x
else
  mov r2.xyz, v1.xyzx
  mov r0.x, cb0[121].x
endif
mad r0.yzw, r1.xxyz, l(0.000000, 0.200000, 0.200000, 0.200000), -r2.xxyz
mad r0.xyz, r0.xxxx, r0.yzwy, r2.xyzx
ne r0.w, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[79].w
mul r1.x, cb0[80].x, l(0.00392156886)
movc o2.z, r0.w, r1.x, r0.z
mad o0.xyz, v2.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
mov o0.w, l(0)
mov o1.xyz, r0.xyzx
mov o1.w, l(0.223606795)
mov o2.xy, r0.xyxx
mov o2.w, cb0[110].z
mov o3.x, l(0.0196078438)
mov o4.x, cb0[110].z
mov o5.x, l(0)
ret
// Approximately 0 instruction slots used

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
