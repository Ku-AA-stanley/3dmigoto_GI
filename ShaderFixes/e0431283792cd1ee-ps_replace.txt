// ---- Created with 3Dmigoto v1.3.16 on Sun Jul 21 18:20:52 2024
Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb1 : register(b1)
{
  float4 cb1[9];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[102];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main(
  float4 v0 : SV_POSITION0,
  float4 v1 : COLOR0,
  float4 v2 : TEXCOORD0,
  float4 v3 : TEXCOORD1,
  float4 v4 : TEXCOORD2,
  float4 v5 : TEXCOORD3,
  float2 v6 : TEXCOORD4,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1,
  out float4 o2 : SV_Target2,
  out float o3 : SV_Target3,
  out float o4 : SV_Target4,
  out float o5 : SV_Target5)
{
  const float4 icb[] = { { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 0, 0, 1.000000, 0},
                              { 0, 0, 0, 1.000000} };
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = cmp(float2(0,0) != cb0[76].wx);
  r0.z = -0.00999999978 + v1.w;
  r0.z = cmp(r0.z < 0);
  r0.x = r0.x ? r0.z : 0;
  if (r0.x != 0) discard;
  r0.xyz = t0.Sample(s1_s, v2.xy).xyz;
  r0.w = 1 + -cb0[31].y;
  r1.z = max(0.00100000005, r0.w);
  r1.xy = r0.xy * float2(2,2) + float2(-1,-1);
  r0.x = dot(r1.xyz, r1.xyz);
  r0.x = rsqrt(r0.x);
  r0.xyw = r1.xyz * r0.xxx;
  r1.xyz = ddx_coarse(v5.yzx);
  r2.xyz = ddy_coarse(v5.zxy);
  r3.xy = ddx_coarse(v2.xy);
  r3.zw = ddy_coarse(v2.xy);
  r4.xyz = v3.yzx * r2.xyz;
  r2.xyz = r2.zxy * v3.zxy + -r4.xyz;
  r4.xyz = v3.zxy * r1.xyz;
  r1.xyz = v3.yzx * r1.yzx + -r4.xyz;
  r4.xyz = r1.xyz * r3.zzz;
  r4.xyz = r2.xyz * r3.xxx + r4.xyz;
  r1.xyz = r1.xyz * r3.www;
  r1.xyz = r2.xyz * r3.yyy + r1.xyz;
  r1.w = dot(r4.xyz, r4.xyz);
  r2.x = dot(r1.xyz, r1.xyz);
  r1.w = max(r2.x, r1.w);
  r1.w = sqrt(r1.w);
  r1.w = 1 / r1.w;
  r2.xyz = r4.xyz * r1.www;
  r2.w = dot(r2.xyz, r2.xyz);
  r2.w = rsqrt(r2.w);
  r2.xyz = r2.xyz * r2.www;
  r1.xyz = r1.xyz * r1.www;
  r1.w = dot(r1.xyz, r1.xyz);
  r1.w = rsqrt(r1.w);
  r1.xyz = r1.xyz * r1.www;
  r1.w = cmp(0.99000001 >= r0.w);
  r1.xyz = r1.xyz * r0.yyy;
  r1.xyz = r0.xxx * r2.xyz + r1.xyz;
  r0.xyw = r0.www * v3.xyz + r1.xyz;
  r1.x = dot(r0.xyw, r0.xyw);
  r1.x = rsqrt(r1.x);
  r0.xyw = r1.xxx * r0.xyw;
  r0.xyw = r1.www ? r0.xyw : v3.xyz;
  r1.xy = cmp(float2(0,0.5) < cb0[95].ww);
  r1.z = cmp(0 != v6.y);
  r2.xyz = r1.zzz ? cb0[96].xyz : cb0[95].xyz;
  r1.xzw = r1.xxx ? r2.xyz : cb0[91].xyz;
  r2.x = dot(r0.xyw, r1.xzw);
  r2.x = r2.x * 0.497500002 + 0.5;
  r2.y = dot(v5.xyz, v5.xyz);
  r2.y = rsqrt(r2.y);
  r3.xyz = v5.xyz * r2.yyy;
  r1.xzw = v5.xyz * r2.yyy + r1.xzw;
  r2.y = dot(r1.xzw, r1.xzw);
  r2.y = rsqrt(r2.y);
  r1.xzw = r2.yyy * r1.xzw;
  r2.y = -1 + cb0[76].z;
  r4.xyzw = t1.SampleBias(s0_s, v2.xy, r2.y).xyzw;
  r2.z = v0.z / v0.w;
  r2.z = cb1[8].z * r2.z + cb1[8].w;
  r2.z = 1 / r2.z;
  r2.w = cb0[32].x * r2.z + cb0[31].z;
  r3.w = min(0.99000001, cb0[32].y);
  r2.w = min(r3.w, r2.w);
  r2.z = cmp(r2.z >= cb0[32].z);
  r2.z = r2.z ? 1.000000 : 0;
  r3.w = cb0[31].w * r2.z;
  r2.w = 1 + -r2.w;
  r0.z = -r2.w + r0.z;
  r0.z = cb0[31].w * r2.z + r0.z;
  r2.z = r3.w + r3.w;
  r0.z = saturate(r0.z / r2.z);
  r5.xyz = cb0[33].xyz * r4.xyz + -r4.xyz;
  r4.xyz = r0.zzz * r5.xyz + r4.xyz;
  r5.xyz = cmp(cb0[28].xxx == float3(3,1,2));
  r0.z = cb0[41].w * r4.w;
  r6.xyz = cb0[42].xyz + -r4.xyz;
  r6.xyz = r0.zzz * r6.xyz + r4.xyz;
  r4.xyz = r5.xxx ? r6.xyz : r4.xyz;
  r0.z = -cb0[28].y + r4.w;
  r0.z = cmp(r0.z < 0);
  r0.z = r5.y ? r0.z : 0;
  if (r0.z != 0) discard;
  r6.xyzw = t2.SampleBias(s2_s, v2.xy, r2.y).xyzw;
  r2.yz = cmp(float2(0,0) != cb0[35].xy);
  r0.z = cmp(0 != cb0[52].x);
  r7.xyzw = cmp(r6.wwww >= float4(0.800000012,0.400000006,0.200000003,0.600000024));
  r0.z = r0.z ? r7.x : 0;
  r0.z = r0.z ? 2 : 1;
  r2.w = cmp(0 != cb0[57].w);
  r2.w = r7.y ? r2.w : 0;
  r5.xyw = cmp(r6.www < float3(0.600000024,0.400000006,0.800000012));
  r2.w = r2.w ? r5.x : 0;
  r0.z = r2.w ? 3 : r0.z;
  r2.w = cmp(0 != cb0[63].w);
  r2.w = r7.z ? r2.w : 0;
  r2.w = r5.y ? r2.w : 0;
  r0.z = r2.w ? 4 : r0.z;
  r2.w = cmp(0 != cb0[69].w);
  r2.w = r7.w ? r2.w : 0;
  r2.w = r5.w ? r2.w : 0;
  r0.z = r2.w ? 5 : r0.z;
  r7.xyzw = cmp(r0.zzzz == float4(2,3,4,5));
  r5.xyw = r7.xxx ? cb0[52].yzw : cb0[25].xyz;
  r5.xyw = r7.yyy ? cb0[58].xyz : r5.xyw;
  r5.xyw = r7.zzz ? cb0[64].xyz : r5.xyw;
  r5.xyw = r7.www ? cb0[70].xyz : r5.xyw;
  r4.xyz = r5.xyw * r4.xyz;
  r2.w = cmp(0.00999999978 < r4.w);
  r2.w = r2.w ? r5.z : 0;
  r3.w = r2.w ? r4.w : 0;
  r4.w = -0.5 + r6.y;
  r2.y = r2.y ? r4.w : 0;
  r2.y = dot(r2.yy, abs(r2.yy));
  r2.y = 0.5 + r2.y;
  r4.w = v1.x * r2.y;
  r2.y = r2.z ? r4.w : r2.y;
  r2.z = cmp(r2.y < 0.0500000007);
  r4.w = cmp(0.949999988 < r2.y);
  r2.x = r2.x + r2.y;
  r2.x = 0.5 * r2.x;
  r2.x = r4.w ? 1 : r2.x;
  r2.x = r2.z ? 0 : r2.x;
  r2.y = cmp(r2.x < cb0[35].z);
  r2.x = cb0[35].z + -r2.x;
  r2.x = r2.x / cb0[35].z;
  r2.z = cmp(0 != cb0[38].y);
  r4.w = v1.y + v1.y;
  r4.w = max(0.00999999978, r4.w);
  r4.w = cb0[38].x * r4.w;
  r2.z = r2.z ? r4.w : cb0[38].x;
  r2.x = r2.x / r2.z;
  r2.x = min(1, r2.x);
  r2.x = 1 + -r2.x;
  r5.y = r2.y ? r2.x : 1;
  r5.x = r2.y ? 1.000000 : 0;
  r2.x = cmp(9.99999975e-06 < v6.x);
  r5.xy = r2.xx ? float2(1,0) : r5.xy;
  r2.x = cmp(0.5 < cb0[91].w);
  r2.y = cb0[90].w + cb0[90].w;
  r2.y = min(1, r2.y);
  r2.x = r2.x ? r2.y : 1;
  r2.y = -1 + r0.z;
  r2.z = r2.y * 0.100000001 + 0.0500000007;
  r4.w = cmp(0 != cb0[36].w);
  if (r4.w != 0) {
    r6.y = r2.y * 0.100000001 + 0.550000012;
    r5.z = 1 + -r2.z;
    r5.w = 1 + -r6.y;
    r8.xyz = t3.Sample(s3_s, r5.yz).xyz;
    r9.xyz = t3.Sample(s3_s, r5.yw).xyz;
    r8.xyz = -r9.xyz + r8.xyz;
    r8.xyz = cb0[88].zzz * r8.xyz + r9.xyz;
    r9.xz = float2(0,0);
    r9.yw = r5.zw;
    r10.xyz = t3.Sample(s3_s, r9.xy).xyz;
    r9.xyz = t3.Sample(s3_s, r9.zw).xyz;
    r10.xyz = r10.xyz + -r9.xyz;
    r9.xyz = cb0[88].zzz * r10.xyz + r9.xyz;
  } else {
    r10.x = 1 + -r2.z;
    r10.y = r5.y;
    r8.xyz = t3.Sample(s3_s, r10.yx).xyz;
    r10.z = 0;
    r9.xyz = t3.Sample(s3_s, r10.zx).xyz;
  }
  r5.y = cmp(r2.x < 1);
  if (r5.y != 0) {
    if (r4.w != 0) {
      r2.y = r2.y * 0.100000001 + 0.550000012;
      r10.yw = float2(1,1) + -r2.zy;
      r10.xz = float2(0,0);
      r11.xyz = t3.Sample(s3_s, r10.xy).xyz;
      r10.xyz = t3.Sample(s3_s, r10.zw).xyz;
      r11.xyz = r11.xyz + -r10.xyz;
      r10.xyz = cb0[88].zzz * r11.xyz + r10.xyz;
    } else {
      r11.y = 1 + -r2.z;
      r11.x = 0;
      r10.xyz = t3.Sample(s3_s, r11.xy).xyz;
    }
  } else {
    r10.xyz = float3(0,0,0);
  }
  r2.y = cmp(0 != r5.x);
  r5.xzw = r8.xyz * r4.xyz;
  r8.xyz = cb0[87].xxx * r4.xyz;
  r5.xzw = r2.yyy ? r5.xzw : r8.xyz;
  r8.xyz = r10.xyz * r4.xyz;
  r10.xyz = -r4.xyz * r10.xyz + r5.xzw;
  r8.xyz = r2.xxx * r10.xyz + r8.xyz;
  r5.xzw = r5.yyy ? r8.xyz : r5.xzw;
  r0.z = cmp(r0.z == 1.000000);
  r2.y = r7.z ? cb0[67].w : cb0[73].w;
  r2.z = r7.z ? cb0[68].x : cb0[74].x;
  r2.y = r7.y ? cb0[61].w : r2.y;
  r2.z = r7.y ? cb0[62].x : r2.z;
  r8.x = r7.x ? cb0[55].w : r2.y;
  r8.y = r7.x ? cb0[56].x : r2.z;
  r2.yz = r0.zz ? cb0[41].xy : r8.xy;
  r1.x = dot(r0.xyw, r1.xzw);
  r1.x = max(0.00100000005, r1.x);
  r1.x = log2(r1.x);
  r1.x = r2.y * r1.x;
  r1.x = exp2(r1.x);
  r1.z = 1 + -r6.z;
  r1.x = cmp(r1.z < r1.x);
  r6.yzw = cb0[39].yzw * r2.zzz;
  r6.xyz = r6.yzw * r6.xxx;
  r6.xyz = r1.xxx ? r6.xyz : 0;
  r6.xyz = cb0[87].xxx * r6.xyz;
  r1.xzw = r1.xxx ? r6.xyz : 0;
  r6.xyz = cb0[46].xyz * r4.xyz;
  r6.xyz = cb0[45].zzz * r6.xyz;
  r8.xyz = cb0[45].www * r6.xyz;
  r10.xyz = cb0[53].xxx * r6.xyz;
  r11.xyz = cb0[58].www * r6.xyz;
  r12.xyz = cb0[64].www * r6.xyz;
  r13.xyz = cb0[70].www * r6.xyz;
  r6.xyz = r7.www ? r13.xyz : r6.xyz;
  r6.xyz = r7.zzz ? r12.xyz : r6.xyz;
  r6.xyz = r7.yyy ? r11.xyz : r6.xyz;
  r6.xyz = r7.xxx ? r10.xyz : r6.xyz;
  r6.xyz = r0.zzz ? r8.xyz : r6.xyz;
  r2.xyz = r1.xzw * r2.xxx;
  r1.xzw = r5.yyy ? r2.xyz : r1.xzw;
  r1.xzw = r5.xzw + r1.xzw;
  r2.xyz = r6.xyz + -r1.xzw;
  r2.xyz = r3.www * r2.xyz + r1.xzw;
  r1.xzw = r2.www ? r2.xyz : r1.xzw;
  r0.z = dot(r0.xyw, r0.xyw);
  r0.z = rsqrt(r0.z);
  r2.xyz = r0.xyw * r0.zzz;
  r0.z = saturate(dot(r3.xyz, r2.xyz));
  r0.z = 1 + -r0.z;
  r0.z = max(9.99999975e-05, r0.z);
  r0.z = log2(r0.z);
  r0.z = cb0[101].x * r0.z;
  r0.z = exp2(r0.z);
  r2.xyz = max(cb0[100].xyz, cb0[99].xyz);
  r2.xyz = r2.xyz * r0.zzz;
  r3.xyz = cb0[101].yyy * r2.xyz;
  r2.xyz = r2.xyz * cb0[101].yyy + r1.xzw;
  r0.z = 1 + -r3.w;
  r0.z = cb0[101].z * r0.z + r3.w;
  r1.xzw = r4.xyz * r9.xyz + r3.xyz;
  r3.x = max(r2.y, r2.z);
  r3.w = max(r3.x, r2.x);
  r4.x = cmp(1 < r3.w);
  r3.xyz = r2.xyz / r3.www;
  r2.w = 1;
  r2.xyzw = r4.xxxx ? r3.xyzw : r2.xyzw;
  r3.xyz = -r2.xyz + r1.xzw;
  r3.xyz = cb0[97].xxx * r3.xyz + r2.xyz;
  r1.xyz = r1.yyy ? r3.xyz : r1.xzw;
  r1.w = saturate(0.0500000007 * r2.w);
  o1.w = sqrt(r1.w);
  r1.w = (uint)cb0[79].x;
  o0.xyz = r0.xyw * float3(0.5,0.5,0.5) + float3(0.5,0.5,0.5);
  r0.x = (uint)r1.w;
  o5.x = 0.00392156886 * r0.x;
  r0.x = cmp(0 != cb0[24].x);
  r0.y = 0.00392156886 * cb0[24].y;
  o2.z = r0.x ? r0.y : r1.z;
  o0.w = r7.x ? 0.333000 : 0;
  o1.xyz = r2.xyz;
  o2.xy = r1.xy;
  o2.w = r0.z;
  o3.x = 0.0156862754;
  o4.x = r0.z;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sun Jul 21 18:20:52 2024
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float     zw
// COLOR                    0   xyzw        1     NONE   float   xy w
// TEXCOORD                 0   xyzw        2     NONE   float   xy
// TEXCOORD                 1   xyzw        3     NONE   float   xyz
// TEXCOORD                 2   xyzw        4     NONE   float   xy w
// TEXCOORD                 3   xyz         5     NONE   float   xyz
// TEXCOORD                 4   xy          6     NONE   float   xy
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
// SV_Target                2   xyzw        2   TARGET   float   xyzw
// SV_Target                3   x           3   TARGET   float   x
// SV_Target                4   x           4   TARGET   float   x
// SV_Target                5   x           5   TARGET   float   x
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 0, 0, 1.000000, 0},
                              { 0, 0, 0, 1.000000} }
dcl_constantbuffer CB0[102], immediateIndexed
dcl_constantbuffer CB1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_input_ps_siv linear noperspective v0.zw, position
dcl_input_ps linear v1.xyw
dcl_input_ps linear v2.xy
dcl_input_ps linear v3.xyz
dcl_input_ps linear v4.xyw
dcl_input_ps linear v5.xyz
dcl_input_ps linear v6.xy
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.x
dcl_output o4.x
dcl_output o5.x
dcl_temps 14
ne r0.xy, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[76].wxww
add r0.z, v1.w, l(-0.010000)
lt r0.z, r0.z, l(0.000000)
and r0.x, r0.x, r0.z
discard_nz r0.x
if_nz r0.y
  lt r0.x, cb0[76].y, l(0.950000)
  if_nz r0.x
    div r0.xy, v4.yxyy, v4.wwww
    mul r0.xy, r0.xyxx, cb1[7].yxyy
    mul r0.xy, r0.xyxx, l(0.250000, 0.250000, 0.000000, 0.000000)
    ge r0.zw, r0.xxxy, -r0.xxxy
    frc r0.xy, |r0.xyxx|
    movc r0.xy, r0.zwzz, r0.xyxx, -r0.xyxx
    mul r0.xy, r0.xyxx, l(4.000000, 4.000000, 0.000000, 0.000000)
    ftou r0.xy, r0.xyxx
    dp4 r1.x, cb0[8].xyzw, icb[r0.y + 0].xyzw
    dp4 r1.y, cb0[9].xyzw, icb[r0.y + 0].xyzw
    dp4 r1.z, cb0[10].xyzw, icb[r0.y + 0].xyzw
    dp4 r1.w, cb0[11].xyzw, icb[r0.y + 0].xyzw
    dp4 r0.x, r1.xyzw, icb[r0.x + 0].xyzw
    mad r0.x, cb0[76].y, l(17.000000), -r0.x
    add r0.x, r0.x, l(-0.010000)
    lt r0.x, r0.x, l(0.000000)
    discard_nz r0.x
  endif
endif
sample_indexable(texture2d)(float,float,float,float) r0.xyz, v2.xyxx, t0.xyzw, s1
add r0.w, -cb0[31].y, l(1.000000)
max r1.z, r0.w, l(0.001000)
mad r1.xy, r0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
dp3 r0.x, r1.xyzx, r1.xyzx
rsq r0.x, r0.x
mul r0.xyw, r0.xxxx, r1.xyxz
deriv_rtx_coarse r1.xyz, v5.yzxy
deriv_rty_coarse r2.xyz, v5.zxyz
deriv_rtx_coarse r3.xy, v2.xyxx
deriv_rty_coarse r3.zw, v2.xxxy
mul r4.xyz, r2.xyzx, v3.yzxy
mad r2.xyz, r2.zxyz, v3.zxyz, -r4.xyzx
mul r4.xyz, r1.xyzx, v3.zxyz
mad r1.xyz, v3.yzxy, r1.yzxy, -r4.xyzx
mul r4.xyz, r3.zzzz, r1.xyzx
mad r4.xyz, r2.xyzx, r3.xxxx, r4.xyzx
mul r1.xyz, r3.wwww, r1.xyzx
mad r1.xyz, r2.xyzx, r3.yyyy, r1.xyzx
dp3 r1.w, r4.xyzx, r4.xyzx
dp3 r2.x, r1.xyzx, r1.xyzx
max r1.w, r1.w, r2.x
sqrt r1.w, r1.w
div r1.w, l(1.000000, 1.000000, 1.000000, 1.000000), r1.w
mul r2.xyz, r1.wwww, r4.xyzx
dp3 r2.w, r2.xyzx, r2.xyzx
rsq r2.w, r2.w
mul r2.xyz, r2.wwww, r2.xyzx
mul r1.xyz, r1.wwww, r1.xyzx
dp3 r1.w, r1.xyzx, r1.xyzx
rsq r1.w, r1.w
mul r1.xyz, r1.wwww, r1.xyzx
ge r1.w, l(0.990000), r0.w
mul r1.xyz, r0.yyyy, r1.xyzx
mad r1.xyz, r0.xxxx, r2.xyzx, r1.xyzx
mad r0.xyw, r0.wwww, v3.xyxz, r1.xyxz
dp3 r1.x, r0.xywx, r0.xywx
rsq r1.x, r1.x
mul r0.xyw, r0.xyxw, r1.xxxx
movc r0.xyw, r1.wwww, r0.xyxw, v3.xyxz
lt r1.xy, l(0.000000, 0.500000, 0.000000, 0.000000), cb0[95].wwww
ne r1.z, l(0.000000, 0.000000, 0.000000, 0.000000), v6.y
movc r2.xyz, r1.zzzz, cb0[96].xyzx, cb0[95].xyzx
movc r1.xzw, r1.xxxx, r2.xxyz, cb0[91].xxyz
dp3 r2.x, r0.xywx, r1.xzwx
mad r2.x, r2.x, l(0.497500), l(0.500000)
dp3 r2.y, v5.xyzx, v5.xyzx
rsq r2.y, r2.y
mul r3.xyz, r2.yyyy, v5.xyzx
mad r1.xzw, v5.xxyz, r2.yyyy, r1.xxzw
dp3 r2.y, r1.xzwx, r1.xzwx
rsq r2.y, r2.y
mul r1.xzw, r1.xxzw, r2.yyyy
add r2.y, cb0[76].z, l(-1.000000)
sample_b_indexable(texture2d)(float,float,float,float) r4.xyzw, v2.xyxx, t1.xyzw, s0, r2.y
div r2.z, v0.z, v0.w
mad r2.z, cb1[8].z, r2.z, cb1[8].w
div r2.z, l(1.000000, 1.000000, 1.000000, 1.000000), r2.z
mad r2.w, cb0[32].x, r2.z, cb0[31].z
min r3.w, cb0[32].y, l(0.990000)
min r2.w, r2.w, r3.w
ge r2.z, r2.z, cb0[32].z
and r2.z, r2.z, l(0x3f800000)
mul r3.w, r2.z, cb0[31].w
add r2.w, -r2.w, l(1.000000)
add r0.z, r0.z, -r2.w
mad r0.z, cb0[31].w, r2.z, r0.z
add r2.z, r3.w, r3.w
div_sat r0.z, r0.z, r2.z
mad r5.xyz, cb0[33].xyzx, r4.xyzx, -r4.xyzx
mad r4.xyz, r0.zzzz, r5.xyzx, r4.xyzx
eq r5.xyz, cb0[28].xxxx, l(3.000000, 1.000000, 2.000000, 0.000000)
mul r0.z, r4.w, cb0[41].w
add r6.xyz, -r4.xyzx, cb0[42].xyzx
mad r6.xyz, r0.zzzz, r6.xyzx, r4.xyzx
movc r4.xyz, r5.xxxx, r6.xyzx, r4.xyzx
add r0.z, r4.w, -cb0[28].y
lt r0.z, r0.z, l(0.000000)
and r0.z, r5.y, r0.z
discard_nz r0.z
sample_b_indexable(texture2d)(float,float,float,float) r6.xyzw, v2.xyxx, t2.xyzw, s2, r2.y
ne r2.yz, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[35].xxyx
ne r0.z, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[52].x
ge r7.xyzw, r6.wwww, l(0.800000, 0.400000, 0.200000, 0.600000)
and r0.z, r0.z, r7.x
movc r0.z, r0.z, l(2.000000), l(1.000000)
ne r2.w, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[57].w
and r2.w, r7.y, r2.w
lt r5.xyw, r6.wwww, l(0.600000, 0.400000, 0.000000, 0.800000)
and r2.w, r2.w, r5.x
movc r0.z, r2.w, l(3.000000), r0.z
ne r2.w, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[63].w
and r2.w, r7.z, r2.w
and r2.w, r5.y, r2.w
movc r0.z, r2.w, l(4.000000), r0.z
ne r2.w, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[69].w
and r2.w, r7.w, r2.w
and r2.w, r5.w, r2.w
movc r0.z, r2.w, l(5.000000), r0.z
eq r7.xyzw, r0.zzzz, l(2.000000, 3.000000, 4.000000, 5.000000)
movc r5.xyw, r7.xxxx, cb0[52].yzyw, cb0[25].xyxz
movc r5.xyw, r7.yyyy, cb0[58].xyxz, r5.xyxw
movc r5.xyw, r7.zzzz, cb0[64].xyxz, r5.xyxw
movc r5.xyw, r7.wwww, cb0[70].xyxz, r5.xyxw
mul r4.xyz, r4.xyzx, r5.xywx
lt r2.w, l(0.010000), r4.w
and r2.w, r2.w, r5.z
and r3.w, r4.w, r2.w
add r4.w, r6.y, l(-0.500000)
and r2.y, r2.y, r4.w
dp2 r2.y, r2.yyyy, |r2.yyyy|
add r2.y, r2.y, l(0.500000)
mul r4.w, r2.y, v1.x
movc r2.y, r2.z, r4.w, r2.y
lt r2.z, r2.y, l(0.050000)
lt r4.w, l(0.950000), r2.y
add r2.x, r2.y, r2.x
mul r2.x, r2.x, l(0.500000)
movc r2.x, r4.w, l(1.000000), r2.x
movc r2.x, r2.z, l(0), r2.x
lt r2.y, r2.x, cb0[35].z
add r2.x, -r2.x, cb0[35].z
div r2.x, r2.x, cb0[35].z
ne r2.z, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[38].y
add r4.w, v1.y, v1.y
max r4.w, r4.w, l(0.010000)
mul r4.w, r4.w, cb0[38].x
movc r2.z, r2.z, r4.w, cb0[38].x
div r2.x, r2.x, r2.z
min r2.x, r2.x, l(1.000000)
add r2.x, -r2.x, l(1.000000)
movc r5.y, r2.y, r2.x, l(1.000000)
and r5.x, r2.y, l(0x3f800000)
lt r2.x, l(0.000010), v6.x
movc r5.xy, r2.xxxx, l(1.000000,0,0,0), r5.xyxx
lt r2.x, l(0.500000), cb0[91].w
add r2.y, cb0[90].w, cb0[90].w
min r2.y, r2.y, l(1.000000)
movc r2.x, r2.x, r2.y, l(1.000000)
add r2.y, r0.z, l(-1.000000)
mad r2.z, r2.y, l(0.100000), l(0.050000)
ne r4.w, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[36].w
if_nz r4.w
  mad r6.y, r2.y, l(0.100000), l(0.550000)
  add r5.z, -r2.z, l(1.000000)
  add r5.w, -r6.y, l(1.000000)
  sample_indexable(texture2d)(float,float,float,float) r8.xyz, r5.yzyy, t3.xyzw, s3
  sample_indexable(texture2d)(float,float,float,float) r9.xyz, r5.ywyy, t3.xyzw, s3
  add r8.xyz, r8.xyzx, -r9.xyzx
  mad r8.xyz, cb0[88].zzzz, r8.xyzx, r9.xyzx
  mov r9.xz, l(0,0,0,0)
  mov r9.yw, r5.zzzw
  sample_indexable(texture2d)(float,float,float,float) r10.xyz, r9.xyxx, t3.xyzw, s3
  sample_indexable(texture2d)(float,float,float,float) r9.xyz, r9.zwzz, t3.xyzw, s3
  add r10.xyz, -r9.xyzx, r10.xyzx
  mad r9.xyz, cb0[88].zzzz, r10.xyzx, r9.xyzx
else
  add r10.x, -r2.z, l(1.000000)
  mov r10.y, r5.y
  sample_indexable(texture2d)(float,float,float,float) r8.xyz, r10.yxyy, t3.xyzw, s3
  mov r10.z, l(0)
  sample_indexable(texture2d)(float,float,float,float) r9.xyz, r10.zxzz, t3.xyzw, s3
endif
lt r5.y, r2.x, l(1.000000)
if_nz r5.y
  if_nz r4.w
    mad r2.y, r2.y, l(0.100000), l(0.550000)
    add r10.yw, -r2.zzzy, l(0.000000, 1.000000, 0.000000, 1.000000)
    mov r10.xz, l(0,0,0,0)
    sample_indexable(texture2d)(float,float,float,float) r11.xyz, r10.xyxx, t3.xyzw, s3
    sample_indexable(texture2d)(float,float,float,float) r10.xyz, r10.zwzz, t3.xyzw, s3
    add r11.xyz, -r10.xyzx, r11.xyzx
    mad r10.xyz, cb0[88].zzzz, r11.xyzx, r10.xyzx
  else
    add r11.y, -r2.z, l(1.000000)
    mov r11.x, l(0)
    sample_indexable(texture2d)(float,float,float,float) r10.xyz, r11.xyxx, t3.xyzw, s3
  endif
else
  mov r10.xyz, l(0,0,0,0)
endif
ne r2.y, l(0.000000, 0.000000, 0.000000, 0.000000), r5.x
mul r5.xzw, r4.xxyz, r8.xxyz
mul r8.xyz, r4.xyzx, cb0[87].xxxx
movc r5.xzw, r2.yyyy, r5.xxzw, r8.xxyz
mul r8.xyz, r4.xyzx, r10.xyzx
mad r10.xyz, -r4.xyzx, r10.xyzx, r5.xzwx
mad r8.xyz, r2.xxxx, r10.xyzx, r8.xyzx
movc r5.xzw, r5.yyyy, r8.xxyz, r5.xxzw
eq r0.z, r0.z, l(1.000000)
movc r2.y, r7.z, cb0[67].w, cb0[73].w
movc r2.z, r7.z, cb0[68].x, cb0[74].x
movc r2.y, r7.y, cb0[61].w, r2.y
movc r2.z, r7.y, cb0[62].x, r2.z
movc r8.x, r7.x, cb0[55].w, r2.y
movc r8.y, r7.x, cb0[56].x, r2.z
movc r2.yz, r0.zzzz, cb0[41].xxyx, r8.xxyx
dp3 r1.x, r0.xywx, r1.xzwx
max r1.x, r1.x, l(0.001000)
log r1.x, r1.x
mul r1.x, r1.x, r2.y
exp r1.x, r1.x
add r1.z, -r6.z, l(1.000000)
lt r1.x, r1.z, r1.x
mul r6.yzw, r2.zzzz, cb0[39].yyzw
mul r6.xyz, r6.xxxx, r6.yzwy
and r6.xyz, r1.xxxx, r6.xyzx
mul r6.xyz, r6.xyzx, cb0[87].xxxx
and r1.xzw, r1.xxxx, r6.xxyz
mul r6.xyz, r4.xyzx, cb0[46].xyzx
mul r6.xyz, r6.xyzx, cb0[45].zzzz
mul r8.xyz, r6.xyzx, cb0[45].wwww
mul r10.xyz, r6.xyzx, cb0[53].xxxx
mul r11.xyz, r6.xyzx, cb0[58].wwww
mul r12.xyz, r6.xyzx, cb0[64].wwww
mul r13.xyz, r6.xyzx, cb0[70].wwww
movc r6.xyz, r7.wwww, r13.xyzx, r6.xyzx
movc r6.xyz, r7.zzzz, r12.xyzx, r6.xyzx
movc r6.xyz, r7.yyyy, r11.xyzx, r6.xyzx
movc r6.xyz, r7.xxxx, r10.xyzx, r6.xyzx
movc r6.xyz, r0.zzzz, r8.xyzx, r6.xyzx
mul r2.xyz, r2.xxxx, r1.xzwx
movc r1.xzw, r5.yyyy, r2.xxyz, r1.xxzw
add r1.xzw, r1.xxzw, r5.xxzw
add r2.xyz, -r1.xzwx, r6.xyzx
mad r2.xyz, r3.wwww, r2.xyzx, r1.xzwx
movc r1.xzw, r2.wwww, r2.xxyz, r1.xxzw
dp3 r0.z, r0.xywx, r0.xywx
rsq r0.z, r0.z
mul r2.xyz, r0.zzzz, r0.xywx
dp3_sat r0.z, r3.xyzx, r2.xyzx
add r0.z, -r0.z, l(1.000000)
max r0.z, r0.z, l(0.000100)
log r0.z, r0.z
mul r0.z, r0.z, cb0[101].x
exp r0.z, r0.z
max r2.xyz, cb0[99].xyzx, cb0[100].xyzx
mul r2.xyz, r0.zzzz, r2.xyzx
mul r3.xyz, r2.xyzx, cb0[101].yyyy
mad r2.xyz, r2.xyzx, cb0[101].yyyy, r1.xzwx
add r0.z, -r3.w, l(1.000000)
mad r0.z, cb0[101].z, r0.z, r3.w
mad r1.xzw, r4.xxyz, r9.xxyz, r3.xxyz
max r3.x, r2.z, r2.y
max r3.w, r2.x, r3.x
lt r4.x, l(1.000000), r3.w
div r3.xyz, r2.xyzx, r3.wwww
mov r2.w, l(1.000000)
movc r2.xyzw, r4.xxxx, r3.xyzw, r2.xyzw
add r3.xyz, r1.xzwx, -r2.xyzx
mad r3.xyz, cb0[97].xxxx, r3.xyzx, r2.xyzx
movc r1.xyz, r1.yyyy, r3.xyzx, r1.xzwx
mul_sat r1.w, r2.w, l(0.050000)
sqrt o1.w, r1.w
ftou r1.w, cb0[79].x
mad o0.xyz, r0.xywx, l(0.500000, 0.500000, 0.500000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
utof r0.x, r1.w
mul o5.x, r0.x, l(0.00392156886)
ne r0.x, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[24].x
mul r0.y, cb0[24].y, l(0.00392156886)
movc o2.z, r0.x, r0.y, r1.z
and o0.w, r7.x, l(0x3eaa7efa)
mov o1.xyz, r2.xyzx
mov o2.xy, r1.xyxx
mov o2.w, r0.z
mov o3.x, l(0.0156862754)
mov o4.x, r0.z
ret
// Approximately 0 instruction slots used

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
