// ---- Created with 3Dmigoto v1.3.16 on Wed Apr 24 01:04:28 2024
Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb1 : register(b1)
{
  float4 cb1[8];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[92];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main(
  float4 v0 : SV_POSITION0,
  float4 v1 : COLOR0,
  float4 v2 : TEXCOORD0,
  float4 v3 : TEXCOORD1,
  float4 v4 : TEXCOORD2,
  float4 v5 : TEXCOORD3,
  float4 v6 : TEXCOORD4,
  float3 v7 : TEXCOORD5,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1,
  out float4 o2 : SV_Target2,
  out float o3 : SV_Target3,
  out float o4 : SV_Target4,
  out float o5 : SV_Target5)
{
  const float4 icb[] = { { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 0, 0, 1.000000, 0},
                              { 0, 0, 0, 1.000000} };
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = cmp(float2(0,0) != cb0[66].wx);
  r0.z = -0.00999999978 + v1.w;
  r0.z = cmp(r0.z < 0);
  r0.x = r0.x ? r0.z : 0;
  r0.x = dot(v5.xyz, v5.xyz);
  r0.x = rsqrt(r0.x);
  r0.yzw = v5.xyz * r0.xxx;
  r1.xy = cmp(float2(0,0.5) < cb0[85].ww);
  r1.zw = cmp(float2(0,0) != v6.yx);
  r2.xyz = r1.zzz ? cb0[86].xyz : cb0[85].xyz;
  r2.xyz = r1.xxx ? r2.xyz : cb0[81].xyz;
  r2.xyz = v5.xyz * r0.xxx + r2.xyz;
  r0.x = dot(r2.xyz, r2.xyz);
  r0.x = rsqrt(r0.x);
  r2.xyz = r2.xyz * r0.xxx;
  r0.x = -1 + cb0[66].z;
  r3.xyzw = t0.SampleBias(s0_s, v2.xy, r0.x).xyzw;
  r4.xyz = cmp(cb0[28].xxx == float3(3,1,2));
  r1.x = cb0[40].z * r3.w;
  r5.xyz = cb0[41].xyz + -r3.xyz;
  r5.xyz = r1.xxx * r5.xyz + r3.xyz;
  r3.xyz = r4.xxx ? r5.xyz : r3.xyz;
  r1.x = -cb0[28].y + r3.w;
  r1.x = cmp(r1.x < 0);
  r1.x = r4.y ? r1.x : 0;
  if (r1.x != 0) discard;
  r5.xyzw = t1.SampleBias(s1_s, v2.xy, r0.x).xyzw;
  r1.xz = cmp(float2(0,0) != cb0[35].xy);
  r0.x = cmp(0 != cb0[50].x);
  r6.xyzw = cmp(r5.wwww >= float4(0.800000012,0.400000006,0.200000003,0.600000024));
  r0.x = r0.x ? r6.x : 0;
  r0.x = r0.x ? 2 : 1;
  r2.w = cmp(0 != cb0[53].w);
  r2.w = r6.y ? r2.w : 0;
  r4.xyw = cmp(r5.www < float3(0.600000024,0.400000006,0.800000012));
  r2.w = r2.w ? r4.x : 0;
  r0.x = r2.w ? 3 : r0.x;
  r2.w = cmp(0 != cb0[57].w);
  r2.w = r6.z ? r2.w : 0;
  r2.w = r4.y ? r2.w : 0;
  r0.x = r2.w ? 4 : r0.x;
  r2.w = cmp(0 != cb0[61].w);
  r2.w = r6.w ? r2.w : 0;
  r2.w = r4.w ? r2.w : 0;
  r0.x = r2.w ? 5 : r0.x;
  r6.xyzw = cmp(r0.xxxx == float4(2,3,4,5));
  r4.xyw = r6.xxx ? cb0[50].yzw : cb0[25].xyz;
  r4.xyw = r6.yyy ? cb0[54].xyz : r4.xyw;
  r4.xyw = r6.zzz ? cb0[58].xyz : r4.xyw;
  r4.xyw = r6.www ? cb0[62].xyz : r4.xyw;
  r3.xyz = r4.xyw * r3.xyz;
  r2.w = cmp(0.00999999978 < r3.w);
  r2.w = r2.w ? r4.z : 0;
  r3.w = r2.w ? r3.w : 0;
  r4.x = t2.Sample(s2_s, v7.xy).w;
  r4.y = max(9.99999997e-07, cb0[44].y);
  r4.z = v7.z + -r4.y;
  r4.z = max(9.99999975e-05, r4.z);
  r4.y = v7.z + r4.y;
  r4.yz = min(float2(0.999899983,0.998899996), r4.yz);
  r4.xy = r4.xy + -r4.zz;
  r4.y = 1 / r4.y;
  r4.x = saturate(r4.x * r4.y);
  r4.y = r4.x * -2 + 3;
  r4.x = r4.x * r4.x;
  r4.z = r4.y * r4.x;
  r4.w = -0.5 + r5.y;
  r1.x = r1.x ? r4.w : 0.5;
  r1.x = dot(r1.xx, abs(r1.xx));
  r1.x = 0.5 + r1.x;
  r4.w = v1.x * r1.x;
  r1.x = r1.z ? r4.w : r1.x;
  r1.z = cmp(r1.x < 0.0500000007);
  r4.w = cmp(0.949999988 < r1.x);
  r1.x = v3.w + r1.x;
  r1.x = 0.5 * r1.x;
  r1.x = r4.w ? 1 : r1.x;
  r1.x = r1.z ? 0 : r1.x;
  r1.z = cmp(r1.x < cb0[35].z);
  if (r1.z != 0) {
    r1.z = cmp(0 != cb0[38].z);
    r7.x = r6.x ? cb0[53].y : cb0[38].w;
    r7.y = r6.x ? cb0[53].z : cb0[39].x;
    r5.yw = r6.yy ? cb0[57].yz : r7.xy;
    r5.yw = r6.zz ? cb0[61].yz : r5.yw;
    r5.yw = r6.ww ? cb0[65].yz : r5.yw;
    r1.x = cb0[35].z + -r1.x;
    r1.x = r1.x / r5.y;
    r4.w = cmp(r1.x >= 1);
    r1.x = 0.00999999978 + r1.x;
    r1.x = log2(r1.x);
    r1.x = r5.w * r1.x;
    r1.x = exp2(r1.x);
    r1.x = min(1, r1.x);
    r1.x = r4.w ? 1 : r1.x;
    r1.x = r1.z ? r1.x : 1;
    r1.z = 0;
  } else {
    r1.xz = float2(0,1);
  }
  r4.w = cmp(0.5 < r5.x);
  r4.z = min(r1.z, r4.z);
  r1.z = r4.w ? r4.z : r1.z;
  r1.z = 1 + -r1.z;
  r4.z = cmp(9.99999975e-06 < v6.x);
  r4.w = cmp(0.5 < cb0[81].w);
  r5.y = cb0[80].w + cb0[80].w;
  r5.y = min(1, r5.y);
  r4.w = r4.w ? r5.y : 1;
  r0.x = cmp(r0.x == 1.000000);
  if (r0.x != 0) {
    r5.y = cmp(0 != cb0[36].w);
    r7.xyz = -cb0[37].xyz + cb0[36].xyz;
    r7.xyz = cb0[78].zzz * r7.xyz + cb0[37].xyz;
    r7.xyz = r5.yyy ? r7.xyz : cb0[36].xyz;
  } else {
    if (r6.x != 0) {
      r5.y = cmp(0 != cb0[36].w);
      r8.xyz = -cb0[52].xyz + cb0[51].yzw;
      r8.xyz = cb0[78].zzz * r8.xyz + cb0[52].xyz;
      r7.xyz = r5.yyy ? r8.xyz : cb0[51].yzw;
    } else {
      r5.y = cmp(0 != cb0[36].w);
      r8.xyz = -cb0[56].xyz + cb0[55].xyz;
      r8.xyz = cb0[78].zzz * r8.xyz + cb0[56].xyz;
      r8.xyz = r5.yyy ? r8.xyz : cb0[55].xyz;
      r9.xyz = -cb0[60].xyz + cb0[59].xyz;
      r9.xyz = cb0[78].zzz * r9.xyz + cb0[60].xyz;
      r9.xyz = r5.yyy ? r9.xyz : cb0[59].xyz;
      r10.xyz = -cb0[64].xyz + cb0[63].xyz;
      r10.xyz = cb0[78].zzz * r10.xyz + cb0[64].xyz;
      r10.xyz = r5.yyy ? r10.xyz : cb0[63].xyz;
      r9.xyz = r6.zzz ? r9.xyz : r10.xyz;
      r7.xyz = r6.yyy ? r8.xyz : r9.xyz;
    }
  }
  r5.y = cmp(r4.w < 1);
  r8.xyz = r5.yyy ? r7.xyz : 0;
  r5.w = cmp(0 != cb0[38].z);
  r7.w = ~(int)r1.w;
  r5.w = r5.w ? r7.w : 0;
  r9.xyz = float3(-1,-1,-1) + r7.xyz;
  r9.xyz = r1.xxx * r9.xyz + float3(1,1,1);
  r9.xyz = r5.www ? r9.xyz : r7.xyz;
  r1.x = -r4.y * r4.x + 1;
  r10.xyz = float3(-1,-1,-1) + r9.xyz;
  r10.xyz = r1.xxx * r10.xyz + float3(1,1,1);
  r9.xyz = r1.www ? r9.xyz : r10.xyz;
  r1.x = cmp(0 != r1.z);
  r1.x = (int)r1.x | (int)r4.z;
  r4.xyz = r9.xyz * r3.xyz;
  r9.xyz = cb0[77].xxx * r3.xyz;
  r1.xzw = r1.xxx ? r4.xyz : r9.xyz;
  r4.xyz = r8.xyz * r3.xyz;
  r8.xyz = -r3.xyz * r8.xyz + r1.xzw;
  r4.xyz = r4.www * r8.xyz + r4.xyz;
  r1.xzw = r5.yyy ? r4.xyz : r1.xzw;
  r4.x = r6.z ? cb0[60].w : cb0[64].w;
  r4.y = r6.z ? cb0[61].x : cb0[65].x;
  r4.x = r6.y ? cb0[56].w : r4.x;
  r4.y = r6.y ? cb0[57].x : r4.y;
  r8.x = r6.x ? cb0[52].w : r4.x;
  r8.y = r6.x ? cb0[53].x : r4.y;
  r4.xy = r0.xx ? cb0[40].xy : r8.xy;
  r2.x = dot(v3.xyz, r2.xyz);
  r2.x = max(0.00100000005, r2.x);
  r2.x = log2(r2.x);
  r2.x = r4.x * r2.x;
  r2.x = exp2(r2.x);
  r2.y = 1 + -r5.z;
  r2.x = cmp(r2.y < r2.x);
  r4.xyz = cb0[39].yzw * r4.yyy;
  r4.xyz = r4.xyz * r5.xxx;
  r4.xyz = r2.xxx ? r4.xyz : 0;
  r4.xyz = cb0[77].xxx * r4.xyz;
  r2.xyz = r2.xxx ? r4.xyz : 0;
  r4.xyz = cb0[45].xyz * r3.xyz;
  r4.xyz = cb0[44].zzz * r4.xyz;
  r5.xzw = cb0[44].www * r4.xyz;
  r8.xyz = cb0[51].xxx * r4.xyz;
  r9.xyz = cb0[54].www * r4.xyz;
  r10.xyz = cb0[58].www * r4.xyz;
  r11.xyz = cb0[62].www * r4.xyz;
  r4.xyz = r6.www ? r11.xyz : r4.xyz;
  r4.xyz = r6.zzz ? r10.xyz : r4.xyz;
  r4.xyz = r6.yyy ? r9.xyz : r4.xyz;
  r4.xyz = r6.xxx ? r8.xyz : r4.xyz;
  r4.xyz = r0.xxx ? r5.xzw : r4.xyz;
  r5.xzw = r2.xyz * r4.www;
  r2.xyz = r5.yyy ? r5.xzw : r2.xyz;
  r1.xzw = r2.xyz + r1.xzw;
  r2.xyz = r4.xyz + -r1.xzw;
  r2.xyz = r3.www * r2.xyz + r1.xzw;
  r1.xzw = r2.www ? r2.xyz : r1.xzw;
  r0.x = dot(v3.xyz, v3.xyz);
  r0.x = rsqrt(r0.x);
  r2.xyz = v3.xyz * r0.xxx;
  r0.x = saturate(dot(r0.yzw, r2.xyz));
  r0.x = 1 + -r0.x;
  r0.x = max(9.99999975e-05, r0.x);
  r0.x = log2(r0.x);
  r0.x = cb0[91].x * r0.x;
  r0.x = exp2(r0.x);
  r0.yzw = max(cb0[90].xyz, cb0[89].xyz);
  r0.xyz = r0.yzw * r0.xxx;
  r2.xyz = cb0[91].yyy * r0.xyz;
  r0.xyz = r0.xyz * cb0[91].yyy + r1.xzw;
  r1.x = 1 + -r3.w;
  r1.x = cb0[91].z * r1.x + r3.w;
  r2.xyz = r3.xyz * r7.xyz + r2.xyz;
  r1.z = max(r0.y, r0.z);
  r3.w = max(r1.z, r0.x);
  r1.z = cmp(1 < r3.w);
  r3.xyz = r0.xyz / r3.www;
  r0.w = 1;
  r0.xyzw = r1.zzzz ? r3.xyzw : r0.xyzw;
  r3.xyz = r2.xyz + -r0.xyz;
  r3.xyz = cb0[87].xxx * r3.xyz + r0.xyz;
  r1.yzw = r1.yyy ? r3.xyz : r2.xyz;
  r0.w = saturate(0.0500000007 * r0.w);
  o1.w = sqrt(r0.w);
  r0.w = (uint)cb0[69].x;
  r0.w = (uint)r0.w;
  o5.x = 0.00392156886 * r0.w;
  r0.w = cmp(0 != cb0[24].x);
  r2.x = 0.00392156886 * cb0[24].y;
  o2.z = r0.w ? r2.x : r1.w;
  o0.xyz = v3.xyz * float3(0.5,0.5,0.5) + float3(0.5,0.5,0.5);
  o0.w = 0.333000004;
  o1.xyz = r0.xyz;
  o2.xyw = r1.yzx;
  o3.x = 0.0156862754;
  o4.x = r1.x;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Wed Apr 24 01:04:28 2024
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// COLOR                    0   xyzw        1     NONE   float   x  w
// TEXCOORD                 0   xyzw        2     NONE   float   xy
// TEXCOORD                 1   xyzw        3     NONE   float   xyzw
// TEXCOORD                 2   xyzw        4     NONE   float   xy w
// TEXCOORD                 3   xyz         5     NONE   float   xyz
// TEXCOORD                 4   xy          6     NONE   float   xy
// TEXCOORD                 5   xyz         7     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
// SV_Target                2   xyzw        2   TARGET   float   xyzw
// SV_Target                3   x           3   TARGET   float   x
// SV_Target                4   x           4   TARGET   float   x
// SV_Target                5   x           5   TARGET   float   x
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 0, 0, 1.000000, 0},
                              { 0, 0, 0, 1.000000} }
dcl_constantbuffer CB0[92], immediateIndexed
dcl_constantbuffer CB1[8], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps linear v1.xw
dcl_input_ps linear v2.xy
dcl_input_ps linear v3.xyzw
dcl_input_ps linear v4.xyw
dcl_input_ps linear v5.xyz
dcl_input_ps linear v6.xy
dcl_input_ps linear v7.xyz
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.x
dcl_output o4.x
dcl_output o5.x
dcl_temps 12
ne r0.xy, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[66].wxww
add r0.z, v1.w, l(-0.010000)
lt r0.z, r0.z, l(0.000000)
and r0.x, r0.x, r0.z
discard_nz r0.x
if_nz r0.y
  lt r0.x, cb0[66].y, l(0.950000)
  if_nz r0.x
    div r0.xy, v4.yxyy, v4.wwww
    mul r0.xy, r0.xyxx, cb1[7].yxyy
    mul r0.xy, r0.xyxx, l(0.250000, 0.250000, 0.000000, 0.000000)
    ge r0.zw, r0.xxxy, -r0.xxxy
    frc r0.xy, |r0.xyxx|
    movc r0.xy, r0.zwzz, r0.xyxx, -r0.xyxx
    mul r0.xy, r0.xyxx, l(4.000000, 4.000000, 0.000000, 0.000000)
    ftou r0.xy, r0.xyxx
    dp4 r1.x, cb0[8].xyzw, icb[r0.y + 0].xyzw
    dp4 r1.y, cb0[9].xyzw, icb[r0.y + 0].xyzw
    dp4 r1.z, cb0[10].xyzw, icb[r0.y + 0].xyzw
    dp4 r1.w, cb0[11].xyzw, icb[r0.y + 0].xyzw
    dp4 r0.x, r1.xyzw, icb[r0.x + 0].xyzw
    mad r0.x, cb0[66].y, l(17.000000), -r0.x
    add r0.x, r0.x, l(-0.010000)
    lt r0.x, r0.x, l(0.000000)
    discard_nz r0.x
  endif
endif
dp3 r0.x, v5.xyzx, v5.xyzx
rsq r0.x, r0.x
mul r0.yzw, r0.xxxx, v5.xxyz
lt r1.xy, l(0.000000, 0.500000, 0.000000, 0.000000), cb0[85].wwww
ne r1.zw, l(0.000000, 0.000000, 0.000000, 0.000000), v6.yyyx
movc r2.xyz, r1.zzzz, cb0[86].xyzx, cb0[85].xyzx
movc r2.xyz, r1.xxxx, r2.xyzx, cb0[81].xyzx
mad r2.xyz, v5.xyzx, r0.xxxx, r2.xyzx
dp3 r0.x, r2.xyzx, r2.xyzx
rsq r0.x, r0.x
mul r2.xyz, r0.xxxx, r2.xyzx
add r0.x, cb0[66].z, l(-1.000000)
sample_b_indexable(texture2d)(float,float,float,float) r3.xyzw, v2.xyxx, t0.xyzw, s0, r0.x
eq r4.xyz, cb0[28].xxxx, l(3.000000, 1.000000, 2.000000, 0.000000)
mul r1.x, r3.w, cb0[40].z
add r5.xyz, -r3.xyzx, cb0[41].xyzx
mad r5.xyz, r1.xxxx, r5.xyzx, r3.xyzx
movc r3.xyz, r4.xxxx, r5.xyzx, r3.xyzx
add r1.x, r3.w, -cb0[28].y
lt r1.x, r1.x, l(0.000000)
and r1.x, r4.y, r1.x
discard_nz r1.x
sample_b_indexable(texture2d)(float,float,float,float) r5.xyzw, v2.xyxx, t1.xyzw, s1, r0.x
ne r1.xz, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[35].xxyx
ne r0.x, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[50].x
ge r6.xyzw, r5.wwww, l(0.800000, 0.400000, 0.200000, 0.600000)
and r0.x, r0.x, r6.x
movc r0.x, r0.x, l(2.000000), l(1.000000)
ne r2.w, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[53].w
and r2.w, r6.y, r2.w
lt r4.xyw, r5.wwww, l(0.600000, 0.400000, 0.000000, 0.800000)
and r2.w, r2.w, r4.x
movc r0.x, r2.w, l(3.000000), r0.x
ne r2.w, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[57].w
and r2.w, r6.z, r2.w
and r2.w, r4.y, r2.w
movc r0.x, r2.w, l(4.000000), r0.x
ne r2.w, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[61].w
and r2.w, r6.w, r2.w
and r2.w, r4.w, r2.w
movc r0.x, r2.w, l(5.000000), r0.x
eq r6.xyzw, r0.xxxx, l(2.000000, 3.000000, 4.000000, 5.000000)
movc r4.xyw, r6.xxxx, cb0[50].yzyw, cb0[25].xyxz
movc r4.xyw, r6.yyyy, cb0[54].xyxz, r4.xyxw
movc r4.xyw, r6.zzzz, cb0[58].xyxz, r4.xyxw
movc r4.xyw, r6.wwww, cb0[62].xyxz, r4.xyxw
mul r3.xyz, r3.xyzx, r4.xywx
lt r2.w, l(0.010000), r3.w
and r2.w, r2.w, r4.z
and r3.w, r3.w, r2.w
sample_indexable(texture2d)(float,float,float,float) r4.x, v7.xyxx, t2.wxyz, s2
max r4.y, cb0[44].y, l(0.000001)
add r4.z, -r4.y, v7.z
max r4.z, r4.z, l(0.000100)
add r4.y, r4.y, v7.z
min r4.yz, r4.yyzy, l(0.000000, 0.999900, 0.998900, 0.000000)
add r4.xy, -r4.zzzz, r4.xyxx
div r4.y, l(1.000000, 1.000000, 1.000000, 1.000000), r4.y
mul_sat r4.x, r4.y, r4.x
mad r4.y, r4.x, l(-2.000000), l(3.000000)
mul r4.x, r4.x, r4.x
mul r4.z, r4.x, r4.y
add r4.w, r5.y, l(-0.500000)
movc r1.x, r1.x, r4.w, l(0.500000)
dp2 r1.x, r1.xxxx, |r1.xxxx|
add r1.x, r1.x, l(0.500000)
mul r4.w, r1.x, v1.x
movc r1.x, r1.z, r4.w, r1.x
lt r1.z, r1.x, l(0.050000)
lt r4.w, l(0.950000), r1.x
add r1.x, r1.x, v3.w
mul r1.x, r1.x, l(0.500000)
movc r1.x, r4.w, l(1.000000), r1.x
movc r1.x, r1.z, l(0), r1.x
lt r1.z, r1.x, cb0[35].z
if_nz r1.z
  ne r1.z, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[38].z
  movc r7.x, r6.x, cb0[53].y, cb0[38].w
  movc r7.y, r6.x, cb0[53].z, cb0[39].x
  movc r5.yw, r6.yyyy, cb0[57].yyyz, r7.xxxy
  movc r5.yw, r6.zzzz, cb0[61].yyyz, r5.yyyw
  movc r5.yw, r6.wwww, cb0[65].yyyz, r5.yyyw
  add r1.x, -r1.x, cb0[35].z
  div r1.x, r1.x, r5.y
  ge r4.w, r1.x, l(1.000000)
  add r1.x, r1.x, l(0.010000)
  log r1.x, r1.x
  mul r1.x, r1.x, r5.w
  exp r1.x, r1.x
  min r1.x, r1.x, l(1.000000)
  movc r1.x, r4.w, l(1.000000), r1.x
  movc r1.x, r1.z, r1.x, l(1.000000)
  mov r1.z, l(0)
else
  mov r1.xz, l(0,0,1.000000,0)
endif
lt r4.w, l(0.500000), r5.x
min r4.z, r4.z, r1.z
movc r1.z, r4.w, r4.z, r1.z
add r1.z, -r1.z, l(1.000000)
lt r4.z, l(0.000010), v6.x
lt r4.w, l(0.500000), cb0[81].w
add r5.y, cb0[80].w, cb0[80].w
min r5.y, r5.y, l(1.000000)
movc r4.w, r4.w, r5.y, l(1.000000)
eq r0.x, r0.x, l(1.000000)
if_nz r0.x
  ne r5.y, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[36].w
  add r7.xyz, cb0[36].xyzx, -cb0[37].xyzx
  mad r7.xyz, cb0[78].zzzz, r7.xyzx, cb0[37].xyzx
  movc r7.xyz, r5.yyyy, r7.xyzx, cb0[36].xyzx
else
  if_nz r6.x
    ne r5.y, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[36].w
    add r8.xyz, cb0[51].yzwy, -cb0[52].xyzx
    mad r8.xyz, cb0[78].zzzz, r8.xyzx, cb0[52].xyzx
    movc r7.xyz, r5.yyyy, r8.xyzx, cb0[51].yzwy
  else
    ne r5.y, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[36].w
    add r8.xyz, cb0[55].xyzx, -cb0[56].xyzx
    mad r8.xyz, cb0[78].zzzz, r8.xyzx, cb0[56].xyzx
    movc r8.xyz, r5.yyyy, r8.xyzx, cb0[55].xyzx
    add r9.xyz, cb0[59].xyzx, -cb0[60].xyzx
    mad r9.xyz, cb0[78].zzzz, r9.xyzx, cb0[60].xyzx
    movc r9.xyz, r5.yyyy, r9.xyzx, cb0[59].xyzx
    add r10.xyz, cb0[63].xyzx, -cb0[64].xyzx
    mad r10.xyz, cb0[78].zzzz, r10.xyzx, cb0[64].xyzx
    movc r10.xyz, r5.yyyy, r10.xyzx, cb0[63].xyzx
    movc r9.xyz, r6.zzzz, r9.xyzx, r10.xyzx
    movc r7.xyz, r6.yyyy, r8.xyzx, r9.xyzx
  endif
endif
lt r5.y, r4.w, l(1.000000)
and r8.xyz, r7.xyzx, r5.yyyy
ne r5.w, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[38].z
not r7.w, r1.w
and r5.w, r5.w, r7.w
add r9.xyz, r7.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
mad r9.xyz, r1.xxxx, r9.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
movc r9.xyz, r5.wwww, r9.xyzx, r7.xyzx
mad r1.x, -r4.y, r4.x, l(1.000000)
add r10.xyz, r9.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
mad r10.xyz, r1.xxxx, r10.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
movc r9.xyz, r1.wwww, r9.xyzx, r10.xyzx
ne r1.x, l(0.000000, 0.000000, 0.000000, 0.000000), r1.z
or r1.x, r1.x, r4.z
mul r4.xyz, r3.xyzx, r9.xyzx
mul r9.xyz, r3.xyzx, cb0[77].xxxx
movc r1.xzw, r1.xxxx, r4.xxyz, r9.xxyz
mul r4.xyz, r3.xyzx, r8.xyzx
mad r8.xyz, -r3.xyzx, r8.xyzx, r1.xzwx
mad r4.xyz, r4.wwww, r8.xyzx, r4.xyzx
movc r1.xzw, r5.yyyy, r4.xxyz, r1.xxzw
movc r4.x, r6.z, cb0[60].w, cb0[64].w
movc r4.y, r6.z, cb0[61].x, cb0[65].x
movc r4.x, r6.y, cb0[56].w, r4.x
movc r4.y, r6.y, cb0[57].x, r4.y
movc r8.x, r6.x, cb0[52].w, r4.x
movc r8.y, r6.x, cb0[53].x, r4.y
movc r4.xy, r0.xxxx, cb0[40].xyxx, r8.xyxx
dp3 r2.x, v3.xyzx, r2.xyzx
max r2.x, r2.x, l(0.001000)
log r2.x, r2.x
mul r2.x, r2.x, r4.x
exp r2.x, r2.x
add r2.y, -r5.z, l(1.000000)
lt r2.x, r2.y, r2.x
mul r4.xyz, r4.yyyy, cb0[39].yzwy
mul r4.xyz, r5.xxxx, r4.xyzx
and r4.xyz, r2.xxxx, r4.xyzx
mul r4.xyz, r4.xyzx, cb0[77].xxxx
and r2.xyz, r2.xxxx, r4.xyzx
mul r4.xyz, r3.xyzx, cb0[45].xyzx
mul r4.xyz, r4.xyzx, cb0[44].zzzz
mul r5.xzw, r4.xxyz, cb0[44].wwww
mul r8.xyz, r4.xyzx, cb0[51].xxxx
mul r9.xyz, r4.xyzx, cb0[54].wwww
mul r10.xyz, r4.xyzx, cb0[58].wwww
mul r11.xyz, r4.xyzx, cb0[62].wwww
movc r4.xyz, r6.wwww, r11.xyzx, r4.xyzx
movc r4.xyz, r6.zzzz, r10.xyzx, r4.xyzx
movc r4.xyz, r6.yyyy, r9.xyzx, r4.xyzx
movc r4.xyz, r6.xxxx, r8.xyzx, r4.xyzx
movc r4.xyz, r0.xxxx, r5.xzwx, r4.xyzx
mul r5.xzw, r4.wwww, r2.xxyz
movc r2.xyz, r5.yyyy, r5.xzwx, r2.xyzx
add r1.xzw, r1.xxzw, r2.xxyz
add r2.xyz, -r1.xzwx, r4.xyzx
mad r2.xyz, r3.wwww, r2.xyzx, r1.xzwx
movc r1.xzw, r2.wwww, r2.xxyz, r1.xxzw
dp3 r0.x, v3.xyzx, v3.xyzx
rsq r0.x, r0.x
mul r2.xyz, r0.xxxx, v3.xyzx
dp3_sat r0.x, r0.yzwy, r2.xyzx
add r0.x, -r0.x, l(1.000000)
max r0.x, r0.x, l(0.000100)
log r0.x, r0.x
mul r0.x, r0.x, cb0[91].x
exp r0.x, r0.x
max r0.yzw, cb0[89].xxyz, cb0[90].xxyz
mul r0.xyz, r0.xxxx, r0.yzwy
mul r2.xyz, r0.xyzx, cb0[91].yyyy
mad r0.xyz, r0.xyzx, cb0[91].yyyy, r1.xzwx
add r1.x, -r3.w, l(1.000000)
mad r1.x, cb0[91].z, r1.x, r3.w
mad r2.xyz, r3.xyzx, r7.xyzx, r2.xyzx
max r1.z, r0.z, r0.y
max r3.w, r0.x, r1.z
lt r1.z, l(1.000000), r3.w
div r3.xyz, r0.xyzx, r3.wwww
mov r0.w, l(1.000000)
movc r0.xyzw, r1.zzzz, r3.xyzw, r0.xyzw
add r3.xyz, -r0.xyzx, r2.xyzx
mad r3.xyz, cb0[87].xxxx, r3.xyzx, r0.xyzx
movc r1.yzw, r1.yyyy, r3.xxyz, r2.xxyz
mul_sat r0.w, r0.w, l(0.050000)
sqrt o1.w, r0.w
ftou r0.w, cb0[69].x
utof r0.w, r0.w
mul o5.x, r0.w, l(0.00392156886)
ne r0.w, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[24].x
mul r2.x, cb0[24].y, l(0.00392156886)
movc o2.z, r0.w, r2.x, r1.w
mad o0.xyz, v3.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
mov o0.w, l(0.333000)
mov o1.xyz, r0.xyzx
mov o2.xyw, r1.yzyx
mov o3.x, l(0.0156862754)
mov o4.x, r1.x
ret
// Approximately 0 instruction slots used

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
