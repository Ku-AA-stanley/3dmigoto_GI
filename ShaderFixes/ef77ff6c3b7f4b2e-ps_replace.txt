// ---- Created with 3Dmigoto v1.3.16 on Sat Jul 20 10:01:25 2024
Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb1 : register(b1)
{
  float4 cb1[8];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[159];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main(
  float4 v0 : SV_POSITION0,
  float4 v1 : COLOR0,
  float4 v2 : TEXCOORD0,
  float4 v3 : TEXCOORD1,
  float4 v4 : TEXCOORD2,
  float4 v5 : TEXCOORD3,
  float4 v6 : TEXCOORD4,
  float4 v7 : TEXCOORD5,
  float4 v8 : TEXCOORD6,
  float4 v9 : TEXCOORD11,
  float4 v10 : TEXCOORD12,
  uint v11 : SV_IsFrontFace0,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1,
  out float4 o2 : SV_Target2,
  out float o3 : SV_Target3,
  out float o4 : SV_Target4,
  out float o5 : SV_Target5)
{
  const float4 icb[] = { { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 0, 0, 1.000000, 0},
                              { 0, 0, 0, 1.000000} };
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.x = cmp(0 != cb0[133].x);
  r0.x = cmp((int)v11.x == 0);
  r0.y = cmp(0 != cb0[132].w);
  r0.y = r0.y ? r0.x : 0;
  r0.yz = r0.yy ? v10.zw : v10.xy;
  r1.xyz = v11.xxx ? v7.xyz : -v7.xyz;
  r0.w = dot(v9.xyz, v9.xyz);
  r0.w = rsqrt(r0.w);
  r2.xyz = v9.xyz * r0.www;
  r3.xy = cmp(float2(0,0.5) < cb0[151].ww);
  r1.w = cmp(0 != v7.w);
  r4.xyz = r1.www ? cb0[152].xyz : cb0[151].xyz;
  r3.xzw = r3.xxx ? r4.xyz : cb0[147].xyz;
  r3.xzw = v9.xyz * r0.www + r3.xzw;
  r0.w = dot(r3.xzw, r3.xzw);
  r0.w = rsqrt(r0.w);
  r3.xzw = r3.xzw * r0.www;
  r0.w = -1 + cb0[133].z;
  r4.xyzw = t0.SampleBias(s0_s, r0.yz, r0.w).xyzw;
  r5.xyz = cmp(cb0[85].xxx == float3(3,1,2));
  r1.w = cb0[98].w * r4.w;
  r6.xyz = cb0[99].xyz + -r4.xyz;
  r6.xyz = r1.www * r6.xyz + r4.xyz;
  r4.xyz = r5.xxx ? r6.xyz : r4.xyz;
  r1.w = -cb0[85].y + r4.w;
  r1.w = cmp(r1.w < 0);
  r1.w = r5.y ? r1.w : 0;
  if (r1.w != 0) discard;
  r6.xyzw = t1.SampleBias(s1_s, r0.yz, r0.w).xyzw;
  r0.y = cmp(0.00100000005 >= cb0[92].x);
  r0.y = r0.y ? 1.000000 : 0;
  r0.y = r0.y * -r6.y + r6.y;
  r0.z = cmp(0 != cb0[109].x);
  r7.xyzw = cmp(r6.wwww >= float4(0.800000012,0.400000006,0.200000003,0.600000024));
  r0.z = r0.z ? r7.x : 0;
  r0.z = r0.z ? 2 : 1;
  r0.w = cmp(0 != cb0[114].w);
  r0.w = r7.y ? r0.w : 0;
  r5.xyw = cmp(r6.www < float3(0.600000024,0.400000006,0.800000012));
  r0.w = r0.w ? r5.x : 0;
  r0.z = r0.w ? 3 : r0.z;
  r0.w = cmp(0 != cb0[120].w);
  r0.w = r7.z ? r0.w : 0;
  r0.w = r5.y ? r0.w : 0;
  r0.z = r0.w ? 4 : r0.z;
  r0.w = cmp(0 != cb0[126].w);
  r0.w = r7.w ? r0.w : 0;
  r0.w = r5.w ? r0.w : 0;
  r0.z = r0.w ? 5 : r0.z;
  r7.xyzw = cmp(r0.zzzz == float4(2,3,4,5));
  r5.xyw = r7.xxx ? cb0[109].yzw : cb0[82].xyz;
  r5.xyw = r7.yyy ? cb0[115].xyz : r5.xyw;
  r5.xyw = r7.zzz ? cb0[121].xyz : r5.xyw;
  r5.xyw = r7.www ? cb0[127].xyz : r5.xyw;
  r8.xyz = r5.xyw * r4.xyz;
  r0.w = cmp(0.00999999978 < r4.w);
  r0.w = r0.w ? r5.z : 0;
  r1.w = r0.w ? r4.w : 0;
  r2.w = cmp(0 != cb0[92].y);
  r4.w = v1.x * r0.y;
  r0.y = r2.w ? r4.w : r0.y;
  r2.w = cmp(r0.y < 0.0500000007);
  r4.w = cmp(0.949999988 < r0.y);
  r0.y = v9.w + r0.y;
  r0.y = 0.5 * r0.y;
  r0.y = r4.w ? 1 : r0.y;
  r0.y = r2.w ? 0 : r0.y;
  r2.w = cmp(r0.y < cb0[92].z);
  r0.y = cb0[92].z + -r0.y;
  r0.y = r0.y / cb0[92].z;
  r4.w = cmp(0 != cb0[95].y);
  r5.z = v1.y + v1.y;
  r5.z = max(0.00999999978, r5.z);
  r5.z = cb0[95].x * r5.z;
  r4.w = r4.w ? r5.z : cb0[95].x;
  r0.y = r0.y / r4.w;
  r0.y = min(1, r0.y);
  r0.y = 1 + -r0.y;
  r9.y = r2.w ? r0.y : 1;
  r9.x = r2.w ? 1.000000 : 0;
  r0.y = cmp(9.99999975e-06 < v8.w);
  r0.x = (int)r0.x | (int)r0.y;
  r9.xy = r0.xx ? float2(1,0) : r9.xy;
  r0.x = cmp(0.5 < cb0[147].w);
  r0.y = cb0[2].w + cb0[2].w;
  r0.y = min(1, r0.y);
  r0.x = r0.x ? r0.y : 1;
  r0.y = -1 + r0.z;
  r2.w = r0.y * 0.100000001 + 0.0500000007;
  r4.w = cmp(0 != cb0[93].w);
  if (r4.w != 0) {
    r5.z = r0.y * 0.100000001 + 0.550000012;
    r9.z = 1 + -r2.w;
    r9.w = 1 + -r5.z;
    r10.xyz = t2.Sample(s2_s, r9.yz).xyz;
    r11.xyz = t2.Sample(s2_s, r9.yw).xyz;
    r10.xyz = -r11.xyz + r10.xyz;
    r10.xyz = cb0[145].zzz * r10.xyz + r11.xyz;
    r11.xz = float2(0,0);
    r11.yw = r9.zw;
    r12.xyz = t2.Sample(s2_s, r11.xy).xyz;
    r11.xyz = t2.Sample(s2_s, r11.zw).xyz;
    r12.xyz = r12.xyz + -r11.xyz;
    r11.xyz = cb0[145].zzz * r12.xyz + r11.xyz;
  } else {
    r12.x = 1 + -r2.w;
    r12.y = r9.y;
    r10.xyz = t2.Sample(s2_s, r12.yx).xyz;
    r12.z = 0;
    r11.xyz = t2.Sample(s2_s, r12.zx).xyz;
  }
  r5.z = cmp(r0.x < 1);
  if (r5.z != 0) {
    if (r4.w != 0) {
      r0.y = r0.y * 0.100000001 + 0.550000012;
      r12.y = 1 + -r2.w;
      r12.w = 1 + -r0.y;
      r12.xz = float2(0,0);
      r9.yzw = t2.Sample(s2_s, r12.xy).xyz;
      r12.xyz = t2.Sample(s2_s, r12.zw).xyz;
      r9.yzw = -r12.xyz + r9.yzw;
      r9.yzw = cb0[145].zzz * r9.yzw + r12.xyz;
    } else {
      r12.y = 1 + -r2.w;
      r12.x = 0;
      r9.yzw = t2.Sample(s2_s, r12.xy).xyz;
    }
  } else {
    r9.yzw = float3(0,0,0);
  }
  r0.y = cmp(0 != r9.x);
  r10.xyz = r10.xyz * r8.xyz;
  r12.xyz = cb0[144].xxx * r8.xyz;
  r10.xyz = r0.yyy ? r10.xyz : r12.xyz;
  r12.xyz = r9.yzw * r8.xyz;
  r9.xyz = -r8.xyz * r9.yzw + r10.xyz;
  r9.xyz = r0.xxx * r9.xyz + r12.xyz;
  r9.xyz = r5.zzz ? r9.xyz : r10.xyz;
  r0.y = cmp(r0.z == 1.000000);
  r0.z = r7.z ? cb0[124].w : cb0[130].w;
  r2.w = r7.z ? cb0[126].x : cb0[132].x;
  r10.xyzw = r7.zzzz ? cb0[125].xyzw : cb0[131].xyzw;
  r0.z = r7.y ? cb0[118].w : r0.z;
  r2.w = r7.y ? cb0[120].x : r2.w;
  r10.xyzw = r7.yyyy ? cb0[119].xyzw : r10.xyzw;
  r12.x = r7.x ? cb0[112].w : r0.z;
  r12.y = r7.x ? cb0[113].x : r10.x;
  r0.z = r7.x ? cb0[114].x : r2.w;
  r10.xyz = r7.xxx ? cb0[113].yzw : r10.yzw;
  r10.xyz = r0.yyy ? cb0[96].yzw : r10.xyz;
  r6.yw = r0.yy ? cb0[98].xy : r12.xy;
  r0.z = r0.y ? cb0[97].w : r0.z;
  r2.w = dot(r1.xyz, r3.xzw);
  r2.w = max(9.99999975e-05, r2.w);
  r2.w = log2(r2.w);
  r2.w = r6.y * r2.w;
  r2.w = exp2(r2.w);
  r3.x = 1 + -r6.z;
  r2.w = cmp(r3.x < r2.w);
  r3.xzw = r10.xyz * r6.www;
  r3.xzw = r3.xzw * r6.xxx;
  r4.xyz = r4.xyz * r5.xyw + float3(-1,-1,-1);
  r4.xyz = r0.zzz * r4.xyz + float3(1,1,1);
  r4.xyz = r4.xyz * r3.xzw;
  r4.w = 1;
  r4.xyzw = r2.wwww ? r4.xyzw : 0;
  r3.xzw = cb0[144].xxx * r4.xyz;
  r3.xzw = r3.xzw * r4.www;
  r4.xyz = cb0[103].xyz * r8.xyz;
  r4.xyz = cb0[102].zzz * r4.xyz;
  r5.xyw = cb0[110].xxx * cb0[110].yzw;
  r6.xyz = cb0[116].xyz * cb0[115].www;
  r10.xyz = cb0[122].xyz * cb0[121].www;
  r12.xyz = cb0[128].xyz * cb0[127].www;
  r13.xyz = cb0[104].xyz * cb0[102].www;
  r13.xyz = r13.xyz * r4.xyz;
  r5.xyw = r5.xyw * r4.xyz;
  r6.xyz = r6.xyz * r4.xyz;
  r10.xyz = r10.xyz * r4.xyz;
  r12.xyz = r12.xyz * r4.xyz;
  r4.xyz = r7.www ? r12.xyz : r4.xyz;
  r4.xyz = r7.zzz ? r10.xyz : r4.xyz;
  r4.xyz = r7.yyy ? r6.xyz : r4.xyz;
  r4.xyz = r7.xxx ? r5.xyw : r4.xyz;
  r4.xyz = r0.yyy ? r13.xyz : r4.xyz;
  r0.xyz = r3.xzw * r0.xxx;
  r0.xyz = r5.zzz ? r0.xyz : r3.xzw;
  r3.xzw = r9.xyz + r0.xyz;
  r4.xyz = r4.xyz + -r3.xzw;
  r4.xyz = r1.www * r4.xyz + r3.xzw;
  r3.xzw = r0.www ? r4.xyz : r3.xzw;
  r0.w = saturate(dot(r2.xyz, r1.xyz));
  r0.w = 1 + -r0.w;
  r0.w = max(9.99999975e-05, r0.w);
  r0.w = log2(r0.w);
  r0.w = cb0[158].x * r0.w;
  r0.w = exp2(r0.w);
  r2.xyz = max(cb0[157].xyz, cb0[156].xyz);
  r2.xyz = r2.xyz * r0.www;
  r4.xyz = cb0[158].yyy * r2.xyz;
  r2.xyz = r2.xyz * cb0[158].yyy + r3.xzw;
  r0.w = 1 + -r1.w;
  r0.w = cb0[158].z * r0.w + r1.w;
  r3.xzw = r8.xyz * r11.xyz + r4.xyz;
  r1.w = max(r2.y, r2.z);
  r4.w = max(r2.x, r1.w);
  r1.w = cmp(1 < r4.w);
  r4.xyz = r2.xyz / r4.www;
  r2.w = 1;
  r2.xyzw = r1.wwww ? r4.xyzw : r2.xyzw;
  r0.xyz = cb0[98].zzz * r0.xyz + r3.xzw;
  r3.xzw = r0.xyz + -r2.xyz;
  r3.xzw = cb0[153].xxx * r3.xzw + r2.xyz;
  r0.xyz = r3.yyy ? r3.xzw : r0.xyz;
  r1.w = saturate(0.0500000007 * r2.w);
  o1.w = sqrt(r1.w);
  o0.xyz = r1.xyz * float3(0.5,0.5,0.5) + float3(0.5,0.5,0.5);
  r1.x = cmp(0 != cb0[81].x);
  r1.y = 0.00392156886 * cb0[81].y;
  o2.z = r1.x ? r1.y : r0.z;
  o0.w = r7.x ? 0.333000 : 0;
  o1.xyz = r2.xyz;
  o2.xyw = r0.xyw;
  o3.x = 0.0156862754;
  o4.x = r0.w;
  o5.x = 0;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Jul 20 10:01:25 2024
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// COLOR                    0   xyzw        1     NONE   float   xy
// TEXCOORD                 0   xyzw        2     NONE   float
// TEXCOORD                 1   xyzw        3     NONE   float
// TEXCOORD                 2   xyzw        4     NONE   float
// TEXCOORD                 3   xyzw        5     NONE   float   xy w
// TEXCOORD                 4   xyzw        6     NONE   float
// TEXCOORD                 5   xyzw        7     NONE   float   xyzw
// TEXCOORD                 6   xyzw        8     NONE   float      w
// TEXCOORD                11   xyzw        9     NONE   float   xyzw
// TEXCOORD                12   xyzw       10     NONE   float   xyzw
// SV_IsFrontFace           0   x          11    FFACE    uint   x
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
// SV_Target                2   xyzw        2   TARGET   float   xyzw
// SV_Target                3   x           3   TARGET   float   x
// SV_Target                4   x           4   TARGET   float   x
// SV_Target                5   x           5   TARGET   float   x
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 0, 0, 1.000000, 0},
                              { 0, 0, 0, 1.000000} }
dcl_constantbuffer CB0[159], immediateIndexed
dcl_constantbuffer CB1[8], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps linear v1.xy
dcl_input_ps linear v5.xyw
dcl_input_ps linear v7.xyzw
dcl_input_ps linear v8.w
dcl_input_ps linear v9.xyzw
dcl_input_ps linear v10.xyzw
dcl_input_ps_sgv constant v11.x, is_front_face
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.x
dcl_output o4.x
dcl_output o5.x
dcl_temps 14
ne r0.x, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[133].x
if_nz r0.x
  lt r0.x, cb0[133].y, l(0.950000)
  if_nz r0.x
    div r0.xy, v5.yxyy, v5.wwww
    mul r0.xy, r0.xyxx, cb1[7].yxyy
    mul r0.xy, r0.xyxx, l(0.250000, 0.250000, 0.000000, 0.000000)
    ge r0.zw, r0.xxxy, -r0.xxxy
    frc r0.xy, |r0.xyxx|
    movc r0.xy, r0.zwzz, r0.xyxx, -r0.xyxx
    mul r0.xy, r0.xyxx, l(4.000000, 4.000000, 0.000000, 0.000000)
    ftou r0.xy, r0.xyxx
    dp4 r1.x, cb0[17].xyzw, icb[r0.y + 0].xyzw
    dp4 r1.y, cb0[18].xyzw, icb[r0.y + 0].xyzw
    dp4 r1.z, cb0[19].xyzw, icb[r0.y + 0].xyzw
    dp4 r1.w, cb0[20].xyzw, icb[r0.y + 0].xyzw
    dp4 r0.x, r1.xyzw, icb[r0.x + 0].xyzw
    mad r0.x, cb0[133].y, l(17.000000), -r0.x
    add r0.x, r0.x, l(-0.010000)
    lt r0.x, r0.x, l(0.000000)
    discard_nz r0.x
  endif
endif
ieq r0.x, v11.x, l(0)
ne r0.y, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[132].w
and r0.y, r0.y, r0.x
movc r0.yz, r0.yyyy, v10.zzwz, v10.xxyx
movc r1.xyz, v11.xxxx, v7.xyzx, -v7.xyzx
dp3 r0.w, v9.xyzx, v9.xyzx
rsq r0.w, r0.w
mul r2.xyz, r0.wwww, v9.xyzx
lt r3.xy, l(0.000000, 0.500000, 0.000000, 0.000000), cb0[151].wwww
ne r1.w, l(0.000000, 0.000000, 0.000000, 0.000000), v7.w
movc r4.xyz, r1.wwww, cb0[152].xyzx, cb0[151].xyzx
movc r3.xzw, r3.xxxx, r4.xxyz, cb0[147].xxyz
mad r3.xzw, v9.xxyz, r0.wwww, r3.xxzw
dp3 r0.w, r3.xzwx, r3.xzwx
rsq r0.w, r0.w
mul r3.xzw, r0.wwww, r3.xxzw
add r0.w, cb0[133].z, l(-1.000000)
sample_b_indexable(texture2d)(float,float,float,float) r4.xyzw, r0.yzyy, t0.xyzw, s0, r0.w
eq r5.xyz, cb0[85].xxxx, l(3.000000, 1.000000, 2.000000, 0.000000)
mul r1.w, r4.w, cb0[98].w
add r6.xyz, -r4.xyzx, cb0[99].xyzx
mad r6.xyz, r1.wwww, r6.xyzx, r4.xyzx
movc r4.xyz, r5.xxxx, r6.xyzx, r4.xyzx
add r1.w, r4.w, -cb0[85].y
lt r1.w, r1.w, l(0.000000)
and r1.w, r5.y, r1.w
discard_nz r1.w
sample_b_indexable(texture2d)(float,float,float,float) r6.xyzw, r0.yzyy, t1.xyzw, s1, r0.w
ge r0.y, l(0.001000), cb0[92].x
and r0.y, r0.y, l(0x3f800000)
mad r0.y, r0.y, -r6.y, r6.y
ne r0.z, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[109].x
ge r7.xyzw, r6.wwww, l(0.800000, 0.400000, 0.200000, 0.600000)
and r0.z, r0.z, r7.x
movc r0.z, r0.z, l(2.000000), l(1.000000)
ne r0.w, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[114].w
and r0.w, r7.y, r0.w
lt r5.xyw, r6.wwww, l(0.600000, 0.400000, 0.000000, 0.800000)
and r0.w, r0.w, r5.x
movc r0.z, r0.w, l(3.000000), r0.z
ne r0.w, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[120].w
and r0.w, r7.z, r0.w
and r0.w, r5.y, r0.w
movc r0.z, r0.w, l(4.000000), r0.z
ne r0.w, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[126].w
and r0.w, r7.w, r0.w
and r0.w, r5.w, r0.w
movc r0.z, r0.w, l(5.000000), r0.z
eq r7.xyzw, r0.zzzz, l(2.000000, 3.000000, 4.000000, 5.000000)
movc r5.xyw, r7.xxxx, cb0[109].yzyw, cb0[82].xyxz
movc r5.xyw, r7.yyyy, cb0[115].xyxz, r5.xyxw
movc r5.xyw, r7.zzzz, cb0[121].xyxz, r5.xyxw
movc r5.xyw, r7.wwww, cb0[127].xyxz, r5.xyxw
mul r8.xyz, r4.xyzx, r5.xywx
lt r0.w, l(0.010000), r4.w
and r0.w, r0.w, r5.z
and r1.w, r4.w, r0.w
ne r2.w, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[92].y
mul r4.w, r0.y, v1.x
movc r0.y, r2.w, r4.w, r0.y
lt r2.w, r0.y, l(0.050000)
lt r4.w, l(0.950000), r0.y
add r0.y, r0.y, v9.w
mul r0.y, r0.y, l(0.500000)
movc r0.y, r4.w, l(1.000000), r0.y
movc r0.y, r2.w, l(0), r0.y
lt r2.w, r0.y, cb0[92].z
add r0.y, -r0.y, cb0[92].z
div r0.y, r0.y, cb0[92].z
ne r4.w, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[95].y
add r5.z, v1.y, v1.y
max r5.z, r5.z, l(0.010000)
mul r5.z, r5.z, cb0[95].x
movc r4.w, r4.w, r5.z, cb0[95].x
div r0.y, r0.y, r4.w
min r0.y, r0.y, l(1.000000)
add r0.y, -r0.y, l(1.000000)
movc r9.y, r2.w, r0.y, l(1.000000)
and r9.x, r2.w, l(0x3f800000)
lt r0.y, l(0.000010), v8.w
or r0.x, r0.x, r0.y
movc r9.xy, r0.xxxx, l(1.000000,0,0,0), r9.xyxx
lt r0.x, l(0.500000), cb0[147].w
add r0.y, cb0[2].w, cb0[2].w
min r0.y, r0.y, l(1.000000)
movc r0.x, r0.x, r0.y, l(1.000000)
add r0.y, r0.z, l(-1.000000)
mad r2.w, r0.y, l(0.100000), l(0.050000)
ne r4.w, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[93].w
if_nz r4.w
  mad r5.z, r0.y, l(0.100000), l(0.550000)
  add r9.z, -r2.w, l(1.000000)
  add r9.w, -r5.z, l(1.000000)
  sample_indexable(texture2d)(float,float,float,float) r10.xyz, r9.yzyy, t2.xyzw, s2
  sample_indexable(texture2d)(float,float,float,float) r11.xyz, r9.ywyy, t2.xyzw, s2
  add r10.xyz, r10.xyzx, -r11.xyzx
  mad r10.xyz, cb0[145].zzzz, r10.xyzx, r11.xyzx
  mov r11.xz, l(0,0,0,0)
  mov r11.yw, r9.zzzw
  sample_indexable(texture2d)(float,float,float,float) r12.xyz, r11.xyxx, t2.xyzw, s2
  sample_indexable(texture2d)(float,float,float,float) r11.xyz, r11.zwzz, t2.xyzw, s2
  add r12.xyz, -r11.xyzx, r12.xyzx
  mad r11.xyz, cb0[145].zzzz, r12.xyzx, r11.xyzx
else
  add r12.x, -r2.w, l(1.000000)
  mov r12.y, r9.y
  sample_indexable(texture2d)(float,float,float,float) r10.xyz, r12.yxyy, t2.xyzw, s2
  mov r12.z, l(0)
  sample_indexable(texture2d)(float,float,float,float) r11.xyz, r12.zxzz, t2.xyzw, s2
endif
lt r5.z, r0.x, l(1.000000)
if_nz r5.z
  if_nz r4.w
    mad r0.y, r0.y, l(0.100000), l(0.550000)
    add r12.y, -r2.w, l(1.000000)
    add r12.w, -r0.y, l(1.000000)
    mov r12.xz, l(0,0,0,0)
    sample_indexable(texture2d)(float,float,float,float) r9.yzw, r12.xyxx, t2.wxyz, s2
    sample_indexable(texture2d)(float,float,float,float) r12.xyz, r12.zwzz, t2.xyzw, s2
    add r9.yzw, r9.yyzw, -r12.xxyz
    mad r9.yzw, cb0[145].zzzz, r9.yyzw, r12.xxyz
  else
    add r12.y, -r2.w, l(1.000000)
    mov r12.x, l(0)
    sample_indexable(texture2d)(float,float,float,float) r9.yzw, r12.xyxx, t2.wxyz, s2
  endif
else
  mov r9.yzw, l(0,0,0,0)
endif
ne r0.y, l(0.000000, 0.000000, 0.000000, 0.000000), r9.x
mul r10.xyz, r8.xyzx, r10.xyzx
mul r12.xyz, r8.xyzx, cb0[144].xxxx
movc r10.xyz, r0.yyyy, r10.xyzx, r12.xyzx
mul r12.xyz, r8.xyzx, r9.yzwy
mad r9.xyz, -r8.xyzx, r9.yzwy, r10.xyzx
mad r9.xyz, r0.xxxx, r9.xyzx, r12.xyzx
movc r9.xyz, r5.zzzz, r9.xyzx, r10.xyzx
eq r0.y, r0.z, l(1.000000)
movc r0.z, r7.z, cb0[124].w, cb0[130].w
movc r2.w, r7.z, cb0[126].x, cb0[132].x
movc r10.xyzw, r7.zzzz, cb0[125].xyzw, cb0[131].xyzw
movc r0.z, r7.y, cb0[118].w, r0.z
movc r2.w, r7.y, cb0[120].x, r2.w
movc r10.xyzw, r7.yyyy, cb0[119].xyzw, r10.xyzw
movc r12.x, r7.x, cb0[112].w, r0.z
movc r12.y, r7.x, cb0[113].x, r10.x
movc r0.z, r7.x, cb0[114].x, r2.w
movc r10.xyz, r7.xxxx, cb0[113].yzwy, r10.yzwy
movc r10.xyz, r0.yyyy, cb0[96].yzwy, r10.xyzx
movc r6.yw, r0.yyyy, cb0[98].xxxy, r12.xxxy
movc r0.z, r0.y, cb0[97].w, r0.z
dp3 r2.w, r1.xyzx, r3.xzwx
max r2.w, r2.w, l(0.000100)
log r2.w, r2.w
mul r2.w, r2.w, r6.y
exp r2.w, r2.w
add r3.x, -r6.z, l(1.000000)
lt r2.w, r3.x, r2.w
mul r3.xzw, r6.wwww, r10.xxyz
mul r3.xzw, r6.xxxx, r3.xxzw
mad r4.xyz, r4.xyzx, r5.xywx, l(-1.000000, -1.000000, -1.000000, 0.000000)
mad r4.xyz, r0.zzzz, r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mul r4.xyz, r3.xzwx, r4.xyzx
mov r4.w, l(1.000000)
and r4.xyzw, r2.wwww, r4.xyzw
mul r3.xzw, r4.xxyz, cb0[144].xxxx
mul r3.xzw, r4.wwww, r3.xxzw
mul r4.xyz, r8.xyzx, cb0[103].xyzx
mul r4.xyz, r4.xyzx, cb0[102].zzzz
mul r5.xyw, cb0[110].yzyw, cb0[110].xxxx
mul r6.xyz, cb0[115].wwww, cb0[116].xyzx
mul r10.xyz, cb0[121].wwww, cb0[122].xyzx
mul r12.xyz, cb0[127].wwww, cb0[128].xyzx
mul r13.xyz, cb0[102].wwww, cb0[104].xyzx
mul r13.xyz, r4.xyzx, r13.xyzx
mul r5.xyw, r4.xyxz, r5.xyxw
mul r6.xyz, r4.xyzx, r6.xyzx
mul r10.xyz, r4.xyzx, r10.xyzx
mul r12.xyz, r4.xyzx, r12.xyzx
movc r4.xyz, r7.wwww, r12.xyzx, r4.xyzx
movc r4.xyz, r7.zzzz, r10.xyzx, r4.xyzx
movc r4.xyz, r7.yyyy, r6.xyzx, r4.xyzx
movc r4.xyz, r7.xxxx, r5.xywx, r4.xyzx
movc r4.xyz, r0.yyyy, r13.xyzx, r4.xyzx
mul r0.xyz, r0.xxxx, r3.xzwx
movc r0.xyz, r5.zzzz, r0.xyzx, r3.xzwx
add r3.xzw, r0.xxyz, r9.xxyz
add r4.xyz, -r3.xzwx, r4.xyzx
mad r4.xyz, r1.wwww, r4.xyzx, r3.xzwx
movc r3.xzw, r0.wwww, r4.xxyz, r3.xxzw
dp3_sat r0.w, r2.xyzx, r1.xyzx
add r0.w, -r0.w, l(1.000000)
max r0.w, r0.w, l(0.000100)
log r0.w, r0.w
mul r0.w, r0.w, cb0[158].x
exp r0.w, r0.w
max r2.xyz, cb0[156].xyzx, cb0[157].xyzx
mul r2.xyz, r0.wwww, r2.xyzx
mul r4.xyz, r2.xyzx, cb0[158].yyyy
mad r2.xyz, r2.xyzx, cb0[158].yyyy, r3.xzwx
add r0.w, -r1.w, l(1.000000)
mad r0.w, cb0[158].z, r0.w, r1.w
mad r3.xzw, r8.xxyz, r11.xxyz, r4.xxyz
max r1.w, r2.z, r2.y
max r4.w, r1.w, r2.x
lt r1.w, l(1.000000), r4.w
div r4.xyz, r2.xyzx, r4.wwww
mov r2.w, l(1.000000)
movc r2.xyzw, r1.wwww, r4.xyzw, r2.xyzw
mad r0.xyz, cb0[98].zzzz, r0.xyzx, r3.xzwx
add r3.xzw, -r2.xxyz, r0.xxyz
mad r3.xzw, cb0[153].xxxx, r3.xxzw, r2.xxyz
movc r0.xyz, r3.yyyy, r3.xzwx, r0.xyzx
mul_sat r1.w, r2.w, l(0.050000)
sqrt o1.w, r1.w
mad o0.xyz, r1.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
ne r1.x, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[81].x
mul r1.y, cb0[81].y, l(0.00392156886)
movc o2.z, r1.x, r1.y, r0.z
and o0.w, r7.x, l(0x3eaa7efa)
mov o1.xyz, r2.xyzx
mov o2.xyw, r0.xyxw
mov o3.x, l(0.0156862754)
mov o4.x, r0.w
mov o5.x, l(0)
ret
// Approximately 0 instruction slots used

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
